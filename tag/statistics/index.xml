<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>statistics | HBS Research Computing Services Blog</title>
    <link>https://hbs-rcs.github.io/tag/statistics/</link>
      <atom:link href="https://hbs-rcs.github.io/tag/statistics/index.xml" rel="self" type="application/rss+xml" />
    <description>statistics</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 01 Mar 2017 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://hbs-rcs.github.io/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>statistics</title>
      <link>https://hbs-rcs.github.io/tag/statistics/</link>
    </image>
    
    <item>
      <title>Use machine learning for causal effect in observational study</title>
      <link>https://hbs-rcs.github.io/post/2017-03-01-causal_tmle/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
      <guid>https://hbs-rcs.github.io/post/2017-03-01-causal_tmle/</guid>
      <description>


&lt;div id=&#34;a-simulation-for-ols-model&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;A simulation for OLS model&lt;/h1&gt;
&lt;p&gt;In an observational study, we need to assume we have the functional form to get causal effect estimated correctly, in addtion to the assumption of treatment being exogenous.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(MASS)
library(ggplot2)
library(dplyr)
library(tmle)
library(glmnet)

set.seed(366)

nobs &amp;lt;- 2000
xw &amp;lt;- .8
xz &amp;lt;- .5
zw &amp;lt;- .6
nrow &amp;lt;- 3
ncol &amp;lt;- 3
covarMat = matrix( c(1^2, xz^2, xw^2, xz^2, 1^2, zw^2,  xw^2, zw^2, 1^2 ) , nrow=ncol , ncol=ncol )

mu &amp;lt;- rep(0,3)
rawvars &amp;lt;- mvrnorm(n=nobs, mu=mu, Sigma=covarMat)
df &amp;lt;- tbl_df(rawvars)
names(df) &amp;lt;- c(&amp;#39;x&amp;#39;,&amp;#39;z&amp;#39;,&amp;#39;w&amp;#39;)
df &amp;lt;- df %&amp;gt;%
    mutate(log.x=log(x^2), log.z=log(z^2), log.w=log(w^2), z.sqr=z^2, w.sqr=w^2) %&amp;gt;%
    mutate(g.var= log.w  + rnorm(nobs)) %&amp;gt;%
    mutate(A = rbinom(nobs, 1, 1/(1+exp((g.var))))) %&amp;gt;%
    mutate(y0=rnorm(nobs) + log.x) %&amp;gt;%
    mutate(tau.true = 2  + rnorm(nobs), y1=y0+tau.true, treat=A, y = treat*y1 + (1-treat)*y0)
lm1 &amp;lt;- lm(y ~ A + log.w + log.x , data=df)
summary(lm1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = y ~ A + log.w + log.x, data = df)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -4.5506 -0.8372 -0.0154  0.8502  4.1624 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)  0.01267    0.04778   0.265    0.791    
## A            1.93171    0.06580  29.355   &amp;lt;2e-16 ***
## log.w        0.01105    0.01428   0.774    0.439    
## log.x        1.00162    0.01353  74.030   &amp;lt;2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 1.255 on 1996 degrees of freedom
## Multiple R-squared:  0.758,  Adjusted R-squared:  0.7576 
## F-statistic:  2084 on 3 and 1996 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm2 &amp;lt;- lm(y ~ A , data=df)
summary(lm2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = y ~ A, data = df)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -15.9102  -1.3822   0.3241   1.6933   6.4046 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) -0.92139    0.08992  -10.25   &amp;lt;2e-16 ***
## A            1.38964    0.11366   12.23   &amp;lt;2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 2.459 on 1998 degrees of freedom
## Multiple R-squared:  0.06961,    Adjusted R-squared:  0.06915 
## F-statistic: 149.5 on 1 and 1998 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm3 &amp;lt;- lm(y ~ A + w, data=df)
summary(lm3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = y ~ A + w, data = df)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -15.9112  -1.3795   0.3139   1.6863   6.3468 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) -0.92056    0.08995 -10.234   &amp;lt;2e-16 ***
## A            1.38860    0.11368  12.215   &amp;lt;2e-16 ***
## w           -0.03351    0.05286  -0.634    0.526    
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 2.46 on 1997 degrees of freedom
## Multiple R-squared:  0.0698, Adjusted R-squared:  0.06887 
## F-statistic: 74.93 on 2 and 1997 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm4 &amp;lt;- lm(y ~ A + w + x, data=df)
summary(lm4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = y ~ A + w + x, data = df)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -15.9109  -1.4047   0.3177   1.6926   6.4528 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) -0.91759    0.08995 -10.201   &amp;lt;2e-16 ***
## A            1.38335    0.11372  12.164   &amp;lt;2e-16 ***
## w           -0.09260    0.06827  -1.356    0.175    
## x            0.09947    0.07275   1.367    0.172    
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 2.459 on 1996 degrees of freedom
## Multiple R-squared:  0.07067,    Adjusted R-squared:  0.06927 
## F-statistic:  50.6 on 3 and 1996 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, treatment assignment process is determined by logged w, and outcome is dtermined by logged x and treatment. However, what we observe is w and x. In observational studies, this happens all the time. In fact, this is an ideal situation, that we observe variables that are determinants of outcome, although we are not sure about the functional form that determines the outcome. However, this example shows that unless we have observed exactly the factors themselves (in this case logged x, w, which determines the DGP), we have biased estimates of the true treatment effect.&lt;/p&gt;
&lt;p&gt;Model 1 is the only model with reasonable estimate of treatment effect (which is 2 in this case). Model 2 is a model with endogeneity: A is correlated with the missing variabel logged x. Model 3 and 4 we have x and w, but not logged, therefore still biased.&lt;/p&gt;
&lt;p&gt;The lesson here is the functional form does matter. However, we have no way of knowing the functional form. What can we do here?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Q.SL.library &amp;lt;- c(&amp;quot;SL.randomForest&amp;quot;, &amp;quot;SL.glmnet&amp;quot;,&amp;quot;SL.loess&amp;quot;,&amp;quot;SL.glm&amp;quot;,&amp;quot;SL.glm.interaction&amp;quot;, &amp;quot;SL.rpart&amp;quot;,&amp;quot;SL.nnet&amp;quot;,&amp;quot;SL.bayesglm&amp;quot;,&amp;quot;SL.gam&amp;quot;,&amp;quot;SL.gbm&amp;quot;,&amp;quot;SL.step&amp;quot;,&amp;quot;SL.mean&amp;quot;)
g.SL.library &amp;lt;- c(&amp;quot;SL.randomForest&amp;quot;, &amp;quot;SL.glmnet&amp;quot;,&amp;quot;SL.glm&amp;quot;,&amp;quot;SL.glm.interaction&amp;quot;, &amp;quot;SL.rpart&amp;quot;,&amp;quot;SL.nnet&amp;quot;,&amp;quot;SL.bayesglm&amp;quot;,&amp;quot;SL.gam&amp;quot;,&amp;quot;SL.gbm&amp;quot;,&amp;quot;SL.step&amp;quot;,&amp;quot;SL.mean&amp;quot;)

# this one is good since both Q and g are correct (including z in it)
tmle1 &amp;lt;- tmle(Y = df$y, A = df$treat, W = df[,c(&amp;#39;x&amp;#39;,&amp;#39;w&amp;#39;)], g.SL.library = g.SL.library , Q.SL.library = Q.SL.library)
tmle1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  Additive Effect
##    Parameter Estimate:  2.015
##    Estimated Variance:  0.0025985
##               p-value:  &amp;lt;2e-16
##     95% Conf Interval: (1.9151, 2.115)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tmle2 &amp;lt;- tmle(Y = df$y, A = df$treat, W = df[,c(&amp;#39;x&amp;#39;,&amp;#39;w&amp;#39;, &amp;#39;z&amp;#39;)], g.SL.library = g.SL.library , Q.SL.library = Q.SL.library)
tmle2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  Additive Effect
##    Parameter Estimate:  2.0263
##    Estimated Variance:  0.0029254
##               p-value:  &amp;lt;2e-16
##     95% Conf Interval: (1.9202, 2.1323)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use &lt;a href=&#34;http://biostats.bepress.com/ucbbiostat/paper275/&#34;&gt;Mark van der Laan’s TMLE method&lt;/a&gt;. It uses &lt;a href=&#34;http://biostats.bepress.com/ucbbiostat/paper222/&#34;&gt;SuperLearner&lt;/a&gt; as the initial estimator. It’s an ensemble of mulitple machine learning algorithms. Therefore it does not need to assume the functional form of the DGP. Even if we don’t have the variables that determines the DGP of outcome, if we observe some functions (even nonlinear functions) of these variables, we can still get reasonable estimates of the treatment effect.&lt;/p&gt;
&lt;p&gt;In this example, we used multiple popular machine learning algorithms in modeling both treatment assingment process and the outcome process. The first TMLE model is with x and w (note not the logged x and w which are in the true DGP), the second one with an additional variable z.&lt;/p&gt;
&lt;p&gt;It seems that TMLE results are less biased than the linear models with x and w. It may not be better than the linear model with logged x and w, but in empirical studies, we often cannot assume we have the variables in the DGP, but only some proxy of the variables in the DGP. I’ll do more simulations to see whether TMLE does perform better in the situation that we are not sure about the functional form. We should expect that is the case.&lt;/p&gt;
&lt;p&gt;So far TMLE can only be used when treatment is binary variable.&lt;/p&gt;
&lt;p&gt;It’s about time we embrace machine learning techniques into studies of caual effect in observational studies.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Interaction term in a non-linear model</title>
      <link>https://hbs-rcs.github.io/post/2017-02-16-nonlinear_interaction/</link>
      <pubDate>Tue, 14 Feb 2017 00:00:00 +0000</pubDate>
      <guid>https://hbs-rcs.github.io/post/2017-02-16-nonlinear_interaction/</guid>
      <description>
&lt;script src=&#34;https://hbs-rcs.github.io/post/2017-02-16-nonlinear_interaction/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;In a non-linear model (for example, logit or poisson model), the interpretation of the coefficient on the interaction term is tricky. &lt;a href=&#34;https://pdfs.semanticscholar.org/6285/8e64d9a337504d72cb862c4cc1e7fd27a7a0.pdf&#34;&gt;Ai and Norton (2003)&lt;/a&gt; points out that the interaction term coefficient is not the same as people can interpret as in a linear model; that is, how much effect of &lt;span class=&#34;math inline&#34;&gt;\(x1\)&lt;/span&gt; changes with the value of &lt;span class=&#34;math inline&#34;&gt;\(x2\)&lt;/span&gt;. They interpret this as a cross&lt;/p&gt;
&lt;p&gt;If we have a linear model with interaction:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ E(y) = \beta_1 x_1 + \beta_2 x_2 + \beta_{12} x_1*x_2 \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Then, the marginal effect&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ \frac{\partial^2 E(y)}{\partial x_1 \partial x_2} = \beta_{12} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;That is, &lt;span class=&#34;math inline&#34;&gt;\(\beta_{12}\)&lt;/span&gt; is the second derivative of &lt;span class=&#34;math inline&#34;&gt;\(E(y)\)&lt;/span&gt; on &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt;. The marginal effect of &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In a non-linear model,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ F(E(y)) = \beta_1 x_1 + \beta_2 x_2 + \beta_{12} x_1*x_2 \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ \frac{\partial^2 F(E(y))}{\partial x_1 \partial x_2} = \beta_{12} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Here, the partial derivative of &lt;span class=&#34;math inline&#34;&gt;\(F(E(y))\)&lt;/span&gt; on &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt; is still &lt;span class=&#34;math inline&#34;&gt;\(\beta_{12}\)&lt;/span&gt;. However, most people are interested in &lt;span class=&#34;math inline&#34;&gt;\(\frac{\partial^2 E(y)}{\partial x_1 \partial x_2}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ \frac{\partial^2 E(y)}{\partial x_1 \partial x_2} = \beta_{12} G&amp;#39;() + (\beta_{1} + \beta_{12} x_2)(\beta_2 + \beta_{12} x_1) G&amp;#39;&amp;#39;()\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(G()\)&lt;/span&gt; is the inverse function of &lt;span class=&#34;math inline&#34;&gt;\(F()\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;It is true that in a non-linear model with interaction, the marginal effect of &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; differs with different values of &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt;. However, even if we have a non-linear model without interaction, the marginal effect of &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; is still different with different values of &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt;. To see this,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ F(E(y)) = \beta_1 x_1 + \beta_2 x_2 \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ \frac{\partial^2 E(y)}{\partial x_1 \partial x_2} =  (\beta_{1} \beta_2 ) G&amp;#39;&amp;#39;()\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Therefore, when we set up our model,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ F(E(y)) = \beta_1 x_1 + \beta_2 x_2 + \beta_{12} x_1*x_2 \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;we have in mind that we allow interaction of &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; to interact for the effect on &lt;span class=&#34;math inline&#34;&gt;\(F(E(y))\)&lt;/span&gt;; not on &lt;span class=&#34;math inline&#34;&gt;\(E(y)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We agree with &lt;a href=&#34;http://people.stern.nyu.edu/wgreene/Lugano2013/Greene-InteractionTerms.pdf&#34;&gt;Bill Greene, 2013&lt;/a&gt;. In
a nonlinear model, the partial effects (as Greene calls it) is
nonlinear, regardless of the model. For example, in a logit model,
even if you don’t have an interaction term in your model, the effect
of &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; will still be different for every value of &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt;, simply
because it’s a nonlinear model.&lt;/p&gt;
&lt;p&gt;As Greene put it at the summary section,
“Build the model based on appropriate statistical procedures and principles. Statistical testing
about the model specification is done at this step Hypothesis tests are about model coefficients
and about the structural aspects of the model specifications. Partial effects are neither
coefficients nor elements of the specification of the model. They are implications of the specified
and estimated model.”&lt;/p&gt;
&lt;p&gt;We also agree with &lt;a href=&#34;http://www.stata-journal.com/sjpdf.html?articlenum=st0194&#34;&gt;Maarten Buis 2010&lt;/a&gt;, that we should use multiplicative effect in a non-linear model. That is, in a non-linear model,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ F(E(y)) = \beta_1 x_1 + \beta_2 x_2 + \beta_{12} x_1*x_2 \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We should pay more attention to&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ \frac{\partial^2 F(E(y))}{\partial x_1 \partial x_2} = \beta_{12} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;For example, in a logit model,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ log(P(y=1)/(1-P(y=1))) = \beta_1 x_1 + \beta_2 x_2 + \beta_{12} x_1*x_2 \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;That is, the log of odds is a linear function of &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt; and interaction. The interaction effect has the same interpretation as the linear model, in terms of log of odds.&lt;/p&gt;
&lt;p&gt;Or, it becomes multiplicative effect when we talk about odds ratios. Stata’s “margins” command is a great tool to calculate marginal effects in various situations, as shown in &lt;a href=&#34;http://www.stata-journal.com/sjpdf.html?articlenum=st0194&#34;&gt;Maarten Buis 2010&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interpreting interaction term in a regression model</title>
      <link>https://hbs-rcs.github.io/post/2017-02-16-interpret_interaction/</link>
      <pubDate>Tue, 14 Feb 2017 00:00:00 +0000</pubDate>
      <guid>https://hbs-rcs.github.io/post/2017-02-16-interpret_interaction/</guid>
      <description>


&lt;div id=&#34;interaction-with-two-binary-variables&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Interaction with two binary variables&lt;/h1&gt;
&lt;p&gt;In a regression model with interaction term, people tend to pay attention to only the coefficient of the interaction term.&lt;/p&gt;
&lt;p&gt;Let’s start with the simpliest situation: &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt; are binary and coded 0/1.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ E(y) = \beta_1 x_1 + \beta_2 x_2 + \beta_{12} x_1x_2 \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In this case, we have a saturated model; that is, we have three coefficients representing additive effects from the baseline situation (both &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt; being 0). There are four different situations, with four combinations of &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;A lot of people just pay attention to the interaction term. In the case of studying treatment effects between two groups, say female and male, that makes sense, the interaction term representing the difference between male and female in terms of treatment effect.&lt;/p&gt;
&lt;p&gt;In this model:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ E(y) = \beta_1 female + \beta_2 treatment + \beta_{12} female*treatment \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The two dummy-coded binary variables, female and treatment, form four combinations. The following 2x2 table represents the expected means of the four cells(combinations).&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;male&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;female&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;control&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(\beta_0\)&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(\beta_0 + \beta_1\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;treatment&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(\beta_0 + \beta_2\)&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;span class=&#34;math inline&#34;&gt;\(\beta_0 + \beta_1 + \beta_2 + \beta_{12}\)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We can see from this table that, for example,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\beta_0=E(Y|(0,0))\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;that is, &lt;span class=&#34;math inline&#34;&gt;\(\beta_0\)&lt;/span&gt; is the expected mean of the cell (0,0) (male and control).&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\beta_0 + \beta_1 =E(Y|(1,0))\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;that is ,&lt;span class=&#34;math inline&#34;&gt;\(\beta_0 + \beta_1\)&lt;/span&gt; is the expected mean of the cell (1,0) (female and control). And so on.&lt;/p&gt;
&lt;p&gt;Now,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ \beta_{12} = (E(Y|(1,1))-E(Y|(0,1)))-(E(Y|(1,0))-E(Y|(0,0))) \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;that is, the coefficient on the interaction term is actually the difference in difference. That’s why in many situations, people are only interested in the interaction coefficient, since they are only interested in the diff-in-diff estimates. The usually diff-in-diff estimator in causal inference literature refer to something similar, instead of female vs. male, people are interested in the treatment effect difference in before and after treatment. If we simply replace female/male dummy with before/after dummy, we can use the same logic. In those situations, it’s fine to mainly focus on the interaction term coefficient.&lt;/p&gt;
&lt;p&gt;In some other situations, the three coefficients are equally important. It depends on your interest. For example, if we are interested in studying differences between union member and non-union member and black vs. non-black, we may not be only interested in the interaction effect. Instead, we might be interested in all four cells, maybe all possible pairwise comparisons. In that case, we should pay attention to all three coefficients. Stata’s “margins” command is of great help if we’d like to compare the cell means.&lt;/p&gt;
&lt;p&gt;Let’s take a look from a sample example in Stata:&lt;/p&gt;
&lt;pre class=&#34;stata&#34;&gt;&lt;code&gt;webuse union3
reg ln_wage i.union##i.black, r
margins union#black
margins union#black, pwcompare
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## . webuse union3
## (National Longitudinal Survey.  Young Women 14-26 years of age in 1968)
## 
## . reg ln_wage i.union##i.black, r
## 
## Linear regression                               Number of obs     =      1,244
##                                                 F(3, 1240)        =      34.76
##                                                 Prob &amp;gt; F          =     0.0000
##                                                 R-squared         =     0.0762
##                                                 Root MSE          =     .37699
## 
## ------------------------------------------------------------------------------
##              |               Robust
##      ln_wage |      Coef.   Std. Err.      t    P&amp;gt;|t|     [95% Conf. Interval]
## -------------+----------------------------------------------------------------
##      1.union |   .2045053   .0291682     7.01   0.000     .1472808    .2617298
##      1.black |  -.1709034   .0308067    -5.55   0.000    -.2313425   -.1104644
##              |
##  union#black |
##         1 1  |   .0386275   .0516609     0.75   0.455     -.062725      .13998
##              |
##        _cons |   1.657525   .0138278   119.87   0.000     1.630396    1.684653
## ------------------------------------------------------------------------------
## 
## . margins union#black
## 
## Adjusted predictions                            Number of obs     =      1,244
## Model VCE    : Robust
## 
## Expression   : Linear prediction, predict()
## 
## ------------------------------------------------------------------------------
##              |            Delta-method
##              |     Margin   Std. Err.      t    P&amp;gt;|t|     [95% Conf. Interval]
## -------------+----------------------------------------------------------------
##  union#black |
##         0 0  |   1.657525   .0138278   119.87   0.000     1.630396    1.684653
##         0 1  |   1.486621    .027529    54.00   0.000     1.432613     1.54063
##         1 0  |    1.86203   .0256822    72.50   0.000     1.811644    1.912415
##         1 1  |   1.729754   .0325611    53.12   0.000     1.665873    1.793635
## ------------------------------------------------------------------------------
## 
## . margins union#black, pwcompare
## 
## Pairwise comparisons of adjusted predictions
## Model VCE    : Robust
## 
## Expression   : Linear prediction, predict()
## 
## -----------------------------------------------------------------
##                 |            Delta-method         Unadjusted
##                 |   Contrast   Std. Err.     [95% Conf. Interval]
## ----------------+------------------------------------------------
##     union#black |
## (0 1) vs (0 0)  |  -.1709034   .0308067     -.2313425   -.1104644
## (1 0) vs (0 0)  |   .2045053   .0291682      .1472808    .2617298
## (1 1) vs (0 0)  |   .0722294   .0353756      .0028268     .141632
## (1 0) vs (0 1)  |   .3754087   .0376487      .3015466    .4492709
## (1 1) vs (0 1)  |   .2431328   .0426388      .1594807     .326785
## (1 1) vs (1 0)  |  -.1322759   .0414705     -.2136359   -.0509159
## -----------------------------------------------------------------
## 
## .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we get by using “margins union#black” is the four cell means of &lt;span class=&#34;math inline&#34;&gt;\(E(Y)\)&lt;/span&gt;, in this case, log of wage. Then “margins union#black, pwcompare” tells us all pairwise comparison of these four cell means. Instead of only paying attention to the interaction coefficient, in this case we might be interested in some comparisons of the four different situations of union and black. In fact, in this example, despite the interaction term being insignificant, all six comparisons of the cell means turn out to have 95% confidence intervals that do not include zero.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;interaction-with-continuous-variables&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Interaction with continuous variables&lt;/h1&gt;
&lt;p&gt;Let’s start with the simpliest situation: &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt; are continuous.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ E(y) = \beta_1 x_1 + \beta_2 x_2 + \beta_{12} x_1*x_2 \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In this case, we recommend “centering” &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt; if they are continuous; that is, subtracting the mean value from each continuous independent variable when they are involved in the interaction term. There are two reason for it:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;To reduce multi-collinearity. If the range of &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt; include only positive numbers, then &lt;span class=&#34;math inline&#34;&gt;\(x_1*x_2\)&lt;/span&gt; can be highly correlated with both or one of &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt;. This can lead to numerical problems and unstable coefficient estimates (multi-collinearity problem).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;“Centering” can reduce the correlation between the interaction term and the independent variables. If the original variables are normally distributed, interaction term after centering is actually uncorrelated with the original variables. When they are not normally distributed, centering will still reduce the correlation to a large degree.&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;To help with interpretation. In a model with interaction, &lt;span class=&#34;math inline&#34;&gt;\(\beta_1\)&lt;/span&gt; represents the effect of &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; when &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt; is zero. However, in many situations, zero is not within the range of &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt;. After centering, centered &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt; at zero simply means original &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt; at its mean value.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When we have dummy variable interacting with continuous variable, only continuous variable should be centered.&lt;/p&gt;
&lt;p&gt;Again, Stata’s margins command is helpful.&lt;/p&gt;
&lt;pre class=&#34;stata&#34;&gt;&lt;code&gt;sysuse auto
sum mpg
gen mpg_centered=mpg-r(mean)
sum mpg_centered
reg price i.foreign##c.mpg_centered
margins foreign, at(mpg_centered=(-3 (1) 3))
marginsplot
graph export marginsplot.eps, replace&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## . sysuse auto
## (1978 Automobile Data)
## 
## . sum mpg
## 
##     Variable |        Obs        Mean    Std. Dev.       Min        Max
## -------------+---------------------------------------------------------
##          mpg |         74     21.2973    5.785503         12         41
## 
## . gen mpg_centered=mpg-r(mean)
## 
## . sum mpg_centered
## 
##     Variable |        Obs        Mean    Std. Dev.       Min        Max
## -------------+---------------------------------------------------------
## mpg_centered |         74   -4.03e-08    5.785503  -9.297297    19.7027
## 
## . reg price i.foreign##c.mpg_centered
## 
##       Source |       SS           df       MS      Number of obs   =        74
## -------------+----------------------------------   F(3, 70)        =      9.48
##        Model |   183435285         3  61145094.9   Prob &amp;gt; F        =    0.0000
##     Residual |   451630112        70  6451858.74   R-squared       =    0.2888
## -------------+----------------------------------   Adj R-squared   =    0.2584
##        Total |   635065396        73  8699525.97   Root MSE        =    2540.1
## 
## ------------------------------------------------------------------------------
##        price |      Coef.   Std. Err.      t    P&amp;gt;|t|     [95% Conf. Interval]
## -------------+----------------------------------------------------------------
##      foreign |
##     Foreign  |   1666.519    717.217     2.32   0.023     236.0751    3096.963
## mpg_centered |  -329.2551   74.98545    -4.39   0.000    -478.8088   -179.7013
##              |
##      foreign#|
##           c. |
## mpg_centered |
##     Foreign  |   78.88826   112.4812     0.70   0.485    -145.4485     303.225
##              |
##        _cons |   5588.295   369.0945    15.14   0.000     4852.159    6324.431
## ------------------------------------------------------------------------------
## 
## . margins foreign, at(mpg_centered=(-3 (1) 3))
## 
## Adjusted predictions                            Number of obs     =         74
## Model VCE    : OLS
## 
## Expression   : Linear prediction, predict()
## 
## 1._at        : mpg_centered    =          -3
## 
## 2._at        : mpg_centered    =          -2
## 
## 3._at        : mpg_centered    =          -1
## 
## 4._at        : mpg_centered    =           0
## 
## 5._at        : mpg_centered    =           1
## 
## 6._at        : mpg_centered    =           2
## 
## 7._at        : mpg_centered    =           3
## 
## ------------------------------------------------------------------------------
##              |            Delta-method
##              |     Margin   Std. Err.      t    P&amp;gt;|t|     [95% Conf. Interval]
## -------------+----------------------------------------------------------------
##  _at#foreign |
##  1#Domestic  |    6576.06    370.446    17.75   0.000     5837.229    7314.891
##   1#Foreign  |   8005.915   766.8178    10.44   0.000     6476.545    9535.284
##  2#Domestic  |   6246.805   354.4734    17.62   0.000      5539.83     6953.78
##   2#Foreign  |   7755.548   709.9327    10.92   0.000     6339.632    9171.464
##  3#Domestic  |    5917.55   354.0032    16.72   0.000     5211.513    6623.587
##   3#Foreign  |   7505.181   658.8306    11.39   0.000     6191.185    8819.177
##  4#Domestic  |   5588.295   369.0945    15.14   0.000     4852.159    6324.431
##   4#Foreign  |   7254.814   614.9548    11.80   0.000     6028.325    8481.303
##  5#Domestic  |    5259.04    397.981    13.21   0.000     4465.292    6052.788
##   5#Foreign  |   7004.447   579.9479    12.08   0.000     5847.778    8161.117
##  6#Domestic  |   4929.785   437.9413    11.26   0.000     4056.338    5803.231
##   6#Foreign  |   6754.081   555.4891    12.16   0.000     5646.192    7861.969
##  7#Domestic  |    4600.53    486.253     9.46   0.000     3630.729    5570.331
##   7#Foreign  |   6503.714   543.0057    11.98   0.000     5420.723    7586.704
## ------------------------------------------------------------------------------
## 
## . marginsplot
## 
##   Variables that uniquely identify margins: mpg_centered foreign
## 
## . graph export marginsplot.eps, replace
## (note: file marginsplot.eps not found)
## (file marginsplot.eps written in EPS format)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://hbs-rcs.github.io/post/2017-02-16-interpret_interaction_files/marginsplot.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;In this example, the graph shows the predicted price for foreign and domestic cars at different level of mpg.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Marginal effects in models with fixed effects</title>
      <link>https://hbs-rcs.github.io/post/2017-02-16-margins_nonlinear/</link>
      <pubDate>Tue, 14 Feb 2017 00:00:00 +0000</pubDate>
      <guid>https://hbs-rcs.github.io/post/2017-02-16-margins_nonlinear/</guid>
      <description>


&lt;div id=&#34;marginal-effects-in-a-linear-model&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Marginal effects in a linear model&lt;/h1&gt;
&lt;p&gt;Stata’s margins command has been a powerful tool for many economists. It can calculate predicted means as well as predicted marginal effects. However, we do need to be careful when we use it when fixed effects are included. In a linear model, everything works out fine. However, in a non-linear model, you may not want to use margins, since it’s not calculating what you have in mind.&lt;/p&gt;
&lt;p&gt;In a linear model with fixed effects, we can do it either by “demeaning” every variable, or include dummy variables. They return the same results. Fortunately, marginal effects can be calculated the same way in both models.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class=&#34;stata&#34;&gt;&lt;code&gt;clear
sysuse auto
xtset rep78
xtreg price c.mpg##c.trunk, fe
margins , dydx(mpg)
reg price c.mpg##c.trunk i.rep78
margins , dydx(mpg)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## . clear
## 
## . sysuse auto
## (1978 Automobile Data)
## 
## . xtset rep78
##        panel variable:  rep78 (unbalanced)
## 
## . xtreg price c.mpg##c.trunk, fe
## 
## Fixed-effects (within) regression               Number of obs     =         69
## Group variable: rep78                           Number of groups  =          5
## 
## R-sq:                                           Obs per group:
##      within  = 0.2570                                         min =          2
##      between = 0.0653                                         avg =       13.8
##      overall = 0.2237                                         max =         30
## 
##                                                 F(3,61)           =       7.03
## corr(u_i, Xb)  = -0.4133                        Prob &amp;gt; F          =     0.0004
## 
## ------------------------------------------------------------------------------
##        price |      Coef.   Std. Err.      t    P&amp;gt;|t|     [95% Conf. Interval]
## -------------+----------------------------------------------------------------
##          mpg |  -98.12003   226.8708    -0.43   0.667    -551.7763    355.5362
##        trunk |   295.0544   343.3934     0.86   0.394    -391.6032     981.712
##              |
##        c.mpg#|
##      c.trunk |  -12.23318   15.94713    -0.77   0.446    -44.12143    19.65506
##              |
##        _cons |    7574.85   5321.325     1.42   0.160    -3065.797     18215.5
## -------------+----------------------------------------------------------------
##      sigma_u |   992.2156
##      sigma_e |  2631.2869
##          rho |  .12449059   (fraction of variance due to u_i)
## ------------------------------------------------------------------------------
## F test that all u_i=0: F(4, 61) = 0.86                       Prob &amp;gt; F = 0.4948
## 
## . margins , dydx(mpg)
## 
## Average marginal effects                        Number of obs     =         69
## Model VCE    : Conventional
## 
## Expression   : Linear prediction, predict()
## dy/dx w.r.t. : mpg
## 
## ------------------------------------------------------------------------------
##              |            Delta-method
##              |      dy/dx   Std. Err.      z    P&amp;gt;|z|     [95% Conf. Interval]
## -------------+----------------------------------------------------------------
##          mpg |  -268.4981   74.12513    -3.62   0.000    -413.7807   -123.2156
## ------------------------------------------------------------------------------
## 
## . reg price c.mpg##c.trunk i.rep78
## 
##       Source |       SS           df       MS      Number of obs   =        69
## -------------+----------------------------------   F(7, 61)        =      3.19
##        Model |   154453046         7  22064720.8   Prob &amp;gt; F        =    0.0061
##     Residual |   422343913        61  6923670.71   R-squared       =    0.2678
## -------------+----------------------------------   Adj R-squared   =    0.1838
##        Total |   576796959        68  8482308.22   Root MSE        =    2631.3
## 
## ------------------------------------------------------------------------------
##        price |      Coef.   Std. Err.      t    P&amp;gt;|t|     [95% Conf. Interval]
## -------------+----------------------------------------------------------------
##          mpg |  -98.12003   226.8708    -0.43   0.667    -551.7763    355.5362
##        trunk |   295.0544   343.3934     0.86   0.394    -391.6032     981.712
##              |
##        c.mpg#|
##      c.trunk |  -12.23318   15.94713    -0.77   0.446    -44.12143    19.65506
##              |
##        rep78 |
##           2  |   438.0002   2161.922     0.20   0.840    -3885.031    4761.031
##           3  |   987.1363   2022.606     0.49   0.627    -3057.315    5031.587
##           4  |   1240.944   2046.417     0.61   0.547     -2851.12    5333.008
##           5  |    2605.83   2161.837     1.21   0.233    -1717.031    6928.691
##              |
##        _cons |   6355.731   5209.899     1.22   0.227    -4062.105    16773.57
## ------------------------------------------------------------------------------
## 
## . margins , dydx(mpg)
## 
## Average marginal effects                        Number of obs     =         69
## Model VCE    : OLS
## 
## Expression   : Linear prediction, predict()
## dy/dx w.r.t. : mpg
## 
## ------------------------------------------------------------------------------
##              |            Delta-method
##              |      dy/dx   Std. Err.      t    P&amp;gt;|t|     [95% Conf. Interval]
## -------------+----------------------------------------------------------------
##          mpg |  -268.4981   74.12513    -3.62   0.001    -416.7205   -120.2758
## ------------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All is fine.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;marginal-effects-in-a-non-linear-model&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Marginal effects in a non-linear model&lt;/h1&gt;
&lt;p&gt;In a nonlinear model, we need to be more careful:&lt;/p&gt;
&lt;pre class=&#34;stata&#34;&gt;&lt;code&gt;clear
sysuse auto
xtset rep78
xtpoisson price mpg trunk, fe
margins , dydx(mpg)
margins , dydx(mpg) predict(nu0)
poisson price mpg trunk i.rep78
margins , dydx(mpg)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## . clear
## 
## . sysuse auto
## (1978 Automobile Data)
## 
## . xtset rep78
##        panel variable:  rep78 (unbalanced)
## 
## . xtpoisson price mpg trunk, fe
## 
## Iteration 0:   log likelihood = -39282.052  
## Iteration 1:   log likelihood = -27527.055  
## Iteration 2:   log likelihood = -27518.944  
## Iteration 3:   log likelihood = -27518.944  
## 
## Conditional fixed-effects Poisson regression    Number of obs     =         69
## Group variable: rep78                           Number of groups  =          5
## 
##                                                 Obs per group:
##                                                               min =          2
##                                                               avg =       13.8
##                                                               max =         30
## 
##                                                 Wald chi2(2)      =   22890.68
## Log likelihood  = -27518.944                    Prob &amp;gt; chi2       =     0.0000
## 
## ------------------------------------------------------------------------------
##        price |      Coef.   Std. Err.      z    P&amp;gt;|z|     [95% Conf. Interval]
## -------------+----------------------------------------------------------------
##          mpg |  -.0450221   .0003814  -118.05   0.000    -.0457696   -.0442746
##        trunk |   .0047349   .0004772     9.92   0.000     .0037996    .0056702
## ------------------------------------------------------------------------------
## 
## . margins , dydx(mpg)
## 
## Average marginal effects                        Number of obs     =         69
## Model VCE    : OIM
## 
## Expression   : Linear prediction, predict()
## dy/dx w.r.t. : mpg
## 
## ------------------------------------------------------------------------------
##              |            Delta-method
##              |      dy/dx   Std. Err.      z    P&amp;gt;|z|     [95% Conf. Interval]
## -------------+----------------------------------------------------------------
##          mpg |  -.0450221   .0003814  -118.05   0.000    -.0457696   -.0442746
## ------------------------------------------------------------------------------
## 
## . margins , dydx(mpg) predict(nu0)
## 
## Average marginal effects                        Number of obs     =         69
## Model VCE    : OIM
## 
## Expression   : Predicted number of events (assuming u_i=0), predict(nu0)
## dy/dx w.r.t. : mpg
## 
## ------------------------------------------------------------------------------
##              |            Delta-method
##              |      dy/dx   Std. Err.      z    P&amp;gt;|z|     [95% Conf. Interval]
## -------------+----------------------------------------------------------------
##          mpg |  -.0190939   .0001245  -153.35   0.000    -.0193379   -.0188498
## ------------------------------------------------------------------------------
## 
## . poisson price mpg trunk i.rep78
## 
## Iteration 0:   log likelihood = -27550.942  
## Iteration 1:   log likelihood = -27550.912  
## Iteration 2:   log likelihood = -27550.912  
## 
## Poisson regression                              Number of obs     =         69
##                                                 LR chi2(6)        =   24962.86
##                                                 Prob &amp;gt; chi2       =     0.0000
## Log likelihood = -27550.912                     Pseudo R2         =     0.3118
## 
## ------------------------------------------------------------------------------
##        price |      Coef.   Std. Err.      z    P&amp;gt;|z|     [95% Conf. Interval]
## -------------+----------------------------------------------------------------
##          mpg |  -.0450221   .0003814  -118.05   0.000    -.0457696   -.0442746
##        trunk |   .0047349   .0004772     9.92   0.000     .0037996    .0056702
##              |
##        rep78 |
##           2  |   .1476657   .0117935    12.52   0.000     .1245509    .1707805
##           3  |   .2295466   .0111741    20.54   0.000     .2076458    .2514474
##           4  |   .2726354   .0112656    24.20   0.000     .2505552    .2947155
##           5  |   .4682657   .0115137    40.67   0.000     .4456992    .4908321
##              |
##        _cons |   9.323117   .0149274   624.57   0.000      9.29386    9.352374
## ------------------------------------------------------------------------------
## 
## . margins , dydx(mpg)
## 
## Average marginal effects                        Number of obs     =         69
## Model VCE    : OIM
## 
## Expression   : Predicted number of events, predict()
## dy/dx w.r.t. : mpg
## 
## ------------------------------------------------------------------------------
##              |            Delta-method
##              |      dy/dx   Std. Err.      z    P&amp;gt;|z|     [95% Conf. Interval]
## -------------+----------------------------------------------------------------
##          mpg |  -276.7079   2.382193  -116.16   0.000    -281.3769   -272.0389
## ------------------------------------------------------------------------------
## 
## .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, “xtpoisson, fe” and “poisson i.rep78” returns the same results. Fixed effect Poisson model (sometimes called conditional fixed effect Poisson) is the same models as a Poisson model with dummies, just like a linear model (OLS with dummies is the same as fixed effect OLS). Poisson model and OLS are unique in this sense that there is no “incidental paramater” problem.&lt;/p&gt;
&lt;p&gt;We see in this example, margins commands do not return the same marginal effects, even though the models are the same. The reason behind this is that in a conditional fixed effect Poisson, the fixed effects are not estimated (they are not in the final likelihood function that gets estimated). Therefore, we’ll have to make a decision what values to use as the values of the fixed effects. “margins, predict(nu0)” simply set all fixed effects to zero. On the other hand, margins after Poisson model with dummies does not do that. The fixed effect in that case gets estimated. Therefore the marginal effects in that case make more sense.&lt;/p&gt;
&lt;p&gt;So our advise for a conditioanl Poisson model is that we should not use margins to calculate marginal effects afterwards; instead, we should simply stick with the original coefficient estimates.&lt;/p&gt;
&lt;p&gt;The same logic applies to the conditional logit model. Fixed effects are not estimated in that model; simply setting them to zero does not make too much sense. In addition, conditional logit model is not the same model as a logit model with dummies, since there is the “incidental paramater” problem. Again, we should just focus on the coefficient estimates as the effect on the logged odds.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A comparison of various count data models with extra zeros</title>
      <link>https://hbs-rcs.github.io/post/2014-09-17-poisson-models/</link>
      <pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate>
      <guid>https://hbs-rcs.github.io/post/2014-09-17-poisson-models/</guid>
      <description>
&lt;script src=&#34;https://hbs-rcs.github.io/post/2014-09-17-poisson-models/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;In empirical studies, data sets with a lot of zeros are often hard to model. There are various models to deal with it: zero-inflated Poisson model, Negative Binomial (NB)model, hurdle model, etc.&lt;/p&gt;
&lt;p&gt;Here we are following a zero-inflated model’s thinking: model the data with two processes. One is a Bernoulli process, the other one is a count data process (Poisson or NB).&lt;/p&gt;
&lt;p&gt;We’d like to see, in this simulation exercise, how different models perform with changes of sample size and percentage of zeros (we expect the less zero, the better a plain Poisson model would perform). Therefore we vary sample size &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; and an indicator of how much percentage of zeros in the data &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;For the count data process (&lt;span class=&#34;math inline&#34;&gt;\(y_c\)&lt;/span&gt;):&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
log(y_c) = 2 x + u
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;For the Bernoulli process (&lt;span class=&#34;math inline&#34;&gt;\(y_b\)&lt;/span&gt;):&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
z_1 = 4 z + \theta
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
logit(y_b) = z_1
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
p_y = \frac{e^{z_1}}{1+e^{z_1}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Combining these two processes:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
y = y_c \ \text{if} \ p_y=1
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
y = y_b \ \text{if} \ p_y=0
\]&lt;/span&gt;&lt;/p&gt;
&lt;div id=&#34;zero-inflated-poisson-models&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Zero-inflated Poisson models&lt;/h2&gt;
&lt;p&gt;A zero-inflated Poisson needs specifying both the binary process and the count process correctly. Often than not, we don’t have a model for the binary process. Many people simply use the same explanatory variables for both processes. We simulate both situations. Case 1: suppose we observe &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt;, and case 2: suppose we don’t observe &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt;. In the graph below, they are labeled zip1 and zip2.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;poisson-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Poisson model&lt;/h2&gt;
&lt;p&gt;A plain Poisson model returns a consistent estimator for the coefficients, with or without Poisson-distributed data. We expect Poisson model’s performance improve with sample size. Note that the standard errors from a Poisson model needs adjustment, which we do not discuss in this post.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;nb-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;NB model&lt;/h2&gt;
&lt;p&gt;NB model is used widely to handle “overdispersion” problem. That is, the variance far exceeds the mean, therefore the Poisson model is considered inappropriate. NB model addresses that by allowing an extra parameter. However, many people also use it to model “extra zero” situation, we’ll see in our simulation it may not be better than a plain Poisson model.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;log-linear-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Log-linear model&lt;/h2&gt;
&lt;p&gt;What about an OLS model with &lt;span class=&#34;math inline&#34;&gt;\(log(y+1)\)&lt;/span&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;hurdle-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;hurdle model&lt;/h2&gt;
&lt;p&gt;A hurdle model models the zero’s and other values separately; that is, the zero’s are from a binomial process only, the other positive values are from a truncated count data process. We assume here, in the simulation, we don’t observe &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt;. Therefore, &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; is determining both binary and count processes. In the graph below, it’s labeled hurdle.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(MASS)
library(pscl)
library(msm)
require(snowfall)
set.seed(666)

# initialize parallel cores.
sfInit( parallel=TRUE, cpus=12)


gen.sim &amp;lt;- function(df){
    z &amp;lt;- rnorm(df[&amp;#39;nobs&amp;#39;],0,1)
    x &amp;lt;- rnorm(df[&amp;#39;nobs&amp;#39;],0,1)
    u &amp;lt;- rnorm(df[&amp;#39;nobs&amp;#39;],0,1)
 #generate count data
    log.mu &amp;lt;- 2*x + u
    y.count &amp;lt;- floor(exp(log.mu))

   # generate bernoulli data
    z1 &amp;lt;- 4*z + df[&amp;#39;th&amp;#39;]
    prob &amp;lt;- exp(z1)/(1+exp(z1))
    y.logit &amp;lt;- rbinom(df[&amp;#39;nobs&amp;#39;],size=1,prob=prob)

    # zero-inflated poisson
    y &amp;lt;- ifelse(y.logit==1, y.count,y.logit)
    m1 &amp;lt;- zeroinfl(y ~ x | z)
    m1.x &amp;lt;- summary(m1)$coefficients$count[&amp;#39;x&amp;#39;,&amp;#39;Estimate&amp;#39;]-2
    # zero-inflated without a z
    m4 &amp;lt;- zeroinfl(y ~ x | x)
    m4.x &amp;lt;- summary(m4)$coefficients$count[&amp;#39;x&amp;#39;,&amp;#39;Estimate&amp;#39;]-2

    # poisson
    m2 &amp;lt;- glm(y ~ x, family = &amp;quot;poisson&amp;quot;)
    m2.x &amp;lt;- summary(m2)$coefficients[&amp;#39;x&amp;#39;,&amp;#39;Estimate&amp;#39;]-2
    # log linear with plus 1
    y.plus1 &amp;lt;- y +1
    m3 &amp;lt;- lm(log(y.plus1) ~ x)
    m3.x &amp;lt;- exp(summary(m3)$coefficients[&amp;#39;x&amp;#39;,&amp;#39;Estimate&amp;#39;])-2
    #
    #
    # negative binomial
#    m5.x &amp;lt;- tryCatch(nb1(y ~ x), error=function(e) NA)
    m5 &amp;lt;- glm(y ~ x, family=negative.binomial(2))
    m5.x &amp;lt;- summary(m5)$coefficients[&amp;#39;x&amp;#39;,&amp;#39;Estimate&amp;#39;]-2
    # hurdle model
    m6 &amp;lt;- hurdle(y ~ x)
#    m5 &amp;lt;- glm(y ~ x, family=negative.binomial(2))
    m6.x &amp;lt;- summary(m6)$coefficients$count[&amp;#39;x&amp;#39;,&amp;#39;Estimate&amp;#39;]-2


    return(c(zip1=m1.x, poisson=m2.x, log.linear=m3.x, zip2=m4.x, nb=m5.x, hurdle=m6.x))
}


# set parameter space
sim.grid = seq(1,100,1)
th.grid = seq(-4, 4, 2)
nobs.grid = ceiling(exp(seq(4,9,1))/100)*100

data.grid &amp;lt;- expand.grid(nobs.grid, sim.grid, th.grid)
names(data.grid) &amp;lt;- c(&amp;#39;nobs&amp;#39;, &amp;#39;nsim&amp;#39;,&amp;#39;th&amp;#39;)

# export functions to the slaves
# export data to the slaves if necessary
sfExport(list=list(&amp;quot;gen.sim&amp;quot;))

# export function to the slaves
sfLibrary(msm)
sfLibrary(pscl)

results &amp;lt;- data.frame(t(sfApply(data.grid, 1, gen.sim)))

# stop the cluster
sfStop()

forshiny &amp;lt;- cbind(data.grid, results)
# write out for use in shiny.
# write.csv(forshiny, &amp;#39;results.csv&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Count data models can be used even if data is not “counts”; for example, some positive non-integer numbers. In fact, Poisson model is consistent even if data is not Poisson-distributed, if the model specification is correct on modeling the log of expected counts. We simulate both scenarios: Case 1, data is generated from a Poisson process. Case 2, data is generated from a Normal distribution, but we use count data models to model it. The above code is for case 2.&lt;/p&gt;
&lt;p&gt;We simulate 100 times with &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt; ranging from -4 to 4, lower number means higher percentage of zeros; number of observations from &lt;span class=&#34;math inline&#34;&gt;\(e^4\)&lt;/span&gt; to &lt;span class=&#34;math inline&#34;&gt;\(e^9\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Since there are many simulations, we used “snowfall” library to speed things up.&lt;/p&gt;
&lt;p&gt;For raw code, please visit &lt;a href=&#34;https://github.com/xiangao/poisson&#34;&gt;case1: poisson&lt;/a&gt; and &lt;a href=&#34;https://github.com/xiangao/poisson2&#34;&gt;case2: normal&lt;/a&gt;.&lt;/p&gt;
&lt;center&gt;
&lt;iframe src=&#34;https://xiangao.shinyapps.io/poisson/&#34; style=&#34;border: none; width: 700px; height: 800px;&#34;&gt;
&lt;/iframe&gt;
&lt;/center&gt;
&lt;center&gt;
&lt;iframe src=&#34;https://xiangao.shinyapps.io/poisson2/&#34; style=&#34;border: none; width: 700px; height: 800px;&#34;&gt;
&lt;/iframe&gt;
&lt;/center&gt;
&lt;p&gt;In the graph, there are two vertical lines. The lighter one is the bias, the other one is MSE.&lt;/p&gt;
&lt;p&gt;If we can compare the situations that data generated from Poisson process and normal process, we can see using count data models to model normal distributed data is still valid, just with bigger standard deviations. With large sample, actually Poisson model out-performs NB, and Log-linear model, without having to model the extra zeros. NB model does not do well, in general. Log-linear model is the worst. Zero-inflated Poisson with correct specification of the binary process performs the best, naturally. But that relies on correct specification of the binary process, which is not always realistic. Zero-inflated Poisson or hurdle model without correct specification of the binary process are not too bad, especially when sample size is large. These two are very close since only the difference between the two is that hurdle is modeling all zeros from binary process and all positive numbers from count data process; while zip2 is modeling some zeros (probably most) from binary process and all other values (including some zeros) from a Poisson process.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A comparison of Lewbel model vs. OLS and TSLS</title>
      <link>https://hbs-rcs.github.io/post/2014-09-12-lewbel-vs-ols-vs-tsls/</link>
      <pubDate>Fri, 12 Sep 2014 00:00:00 +0000</pubDate>
      <guid>https://hbs-rcs.github.io/post/2014-09-12-lewbel-vs-ols-vs-tsls/</guid>
      <description>
&lt;script src=&#34;https://hbs-rcs.github.io/post/2014-09-12-lewbel-vs-ols-vs-tsls/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post is inspired by &lt;a href=&#34;http://diffuseprior.wordpress.com/2014/05/15/the-ivlewbel-package-a-new-way-to-tackle-endogenous-regressor-models/&#34;&gt;diffuse prior&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www2.bc.edu/~lewbel/simhet16.pdf&#34;&gt;Lewbel’s 2012 paper&lt;/a&gt; proposed an estimator based on heteroscedasticity to address the problem of endogeneity without an instrument. This problem has been an issue for many (maybe most) empirical researchers with observational data. People are challenged with endogeneity and they have difficulty locating a valid instrument (who doesn’t?).&lt;/p&gt;
&lt;p&gt;Using the “ivlewbel” package in R, I compare the performance of Lewbel’s estimator with OLS and TSLS (two stage least square) estimators, with different values of sample size, and heteroscedasticity.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ivlewbel)
require(snowfall)
set.seed(666)

## initialize parallel cores.
sfInit( parallel=TRUE, cpus=12)

gen.sim &amp;lt;- function(df){
    k &amp;lt;- df[&amp;#39;k&amp;#39;]
    nobs &amp;lt;- df[&amp;#39;nobs&amp;#39;]
    x&amp;lt;-runif(nobs, min=-1, max=1)
    u &amp;lt;- rnorm(nobs,0,1)
    u1 &amp;lt;- rnorm(nobs,0,1)
    u2 &amp;lt;- rnorm(nobs,0,1)
    x1 &amp;lt;-runif(nobs, min=-1, max=1)
    x2 &amp;lt;- rnorm(nobs,0,1)
    z &amp;lt;- rnorm(nobs,0,1)
    e1 = exp(.3*k*(x+x1))*u1
    e2 = u2

    ## y1 is the endogenous variable; z is the instrument; x1 is
    ## omitted but determines heteroskedasticity of y1; e1 e2 are
    ## correlated because of common factor of u; x is the only
    ## observed exogenous variable.  The true coefficient on y1 should
    ## be 1.  lewbel model use x as both the exogenous variable and
    ## the heteroscedasticity factor.  tsls assumes we have an
    ## instrument z.  k is to adjust for degree of heteroscedasticity.
    y1 = 1 + z + x + x1 +  e1
    y2 = 1 + y1  + x + x1 +  e2
    data = data.frame(y2, y1, x1, x2, z, x)

    lewbel.model &amp;lt;- lewbel(formula = y2 ~ y1  | x   | x  , data = data)
    lm.model &amp;lt;- lm(y2 ~ y1 + x, data=data)
    tsls.model &amp;lt;- tsls(y2 ~ y1 + x   , ~ z + x  , data=data)

    lm.y1 &amp;lt;- summary(lm.model)$coefficients[&amp;#39;y1&amp;#39;,&amp;#39;Estimate&amp;#39;]-1
    tsls.y1 &amp;lt;- tsls.model$coefficients[&amp;#39;y1&amp;#39;]-1
    lewbel.y1 &amp;lt;- lewbel.model$coef.est[&amp;#39;y1&amp;#39;, &amp;#39;Estimate&amp;#39;]-1
    return(c(lm=lm.y1, lewbel=lewbel.y1,tsls=tsls.y1))
}


## set parameter space
sim.grid = seq(1,100,1)
k.grid=seq(1,10,1)
nobs.grid = ceiling(exp(seq(4, 8, 1))/100)*100
data.grid &amp;lt;- expand.grid(nobs.grid, sim.grid, k.grid)
names(data.grid) &amp;lt;- c(&amp;#39;nobs&amp;#39;, &amp;#39;nsim&amp;#39;, &amp;#39;k&amp;#39;)

## export functions to the slaves
## export data to the slaves if necessary
sfExport(list=list(&amp;quot;gen.sim&amp;quot;))

## export function to the slaves
sfLibrary(ivlewbel)

## parallel computing
results &amp;lt;- data.frame(t(sfApply(data.grid, 1, gen.sim)))

## stop the cluster
sfStop()

names(results) &amp;lt;- c(&amp;#39;lm&amp;#39;,&amp;#39;lewbel&amp;#39;,&amp;#39;tsls&amp;#39;)
forshiny &amp;lt;- cbind(data.grid, results)
## write out for use in shiny.
## write.csv(forshiny, &amp;#39;results.csv&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data generating processes in this simulation study are: &lt;span class=&#34;math display&#34;&gt;\[y_2\]&lt;/span&gt; is the dependent variable.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
y_2 = y_1 + x + x_1 + e_2
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
y_1 = z + x + x_1 + e_1
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Here &lt;span class=&#34;math display&#34;&gt;\[e_1\]&lt;/span&gt; and &lt;span class=&#34;math display&#34;&gt;\[e_2\]&lt;/span&gt; are the error terms. Among the independent variables of &lt;span class=&#34;math display&#34;&gt;\[y_2\]&lt;/span&gt;, &lt;span class=&#34;math display&#34;&gt;\[x\]&lt;/span&gt; is observed; &lt;span class=&#34;math display&#34;&gt;\[x_1\]&lt;/span&gt; is unobserved, &lt;span class=&#34;math display&#34;&gt;\[z\]&lt;/span&gt; is the intended instruments. &lt;span class=&#34;math display&#34;&gt;\[y_1\]&lt;/span&gt; is the endogenous variable, since it’s determined by &lt;span class=&#34;math display&#34;&gt;\[x_1\]&lt;/span&gt;, and &lt;span class=&#34;math display&#34;&gt;\[x_1\]&lt;/span&gt; is part of &lt;span class=&#34;math display&#34;&gt;\[y_2\]&lt;/span&gt;’s error term since &lt;span class=&#34;math display&#34;&gt;\[x_1\]&lt;/span&gt; is unobserved. If we have &lt;span class=&#34;math display&#34;&gt;\[z\]&lt;/span&gt;, then we can use TSLS to estimate the model. If not, then we’ll try Lewbel’s model to see if it works.&lt;/p&gt;
&lt;p&gt;The ‘gen_sim’ function returns the three estimates (OLS, TSLS and Lewbel). &lt;span class=&#34;math display&#34;&gt;\[e_1\]&lt;/span&gt; is assumed to have some degree of heteroscedasticity:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
e_1 = e^{0.3*k*(x+x_1)}*u_1
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math display&#34;&gt;\[u_1\]&lt;/span&gt; is a standard normal variable. &lt;span class=&#34;math display&#34;&gt;\[k\]&lt;/span&gt; is a variable used to adjust for degree of heteroscedasticity. Here we assume we know a variable that determines the heteroscedasticity: &lt;span class=&#34;math display&#34;&gt;\[x\]&lt;/span&gt;. But &lt;span class=&#34;math display&#34;&gt;\[x_1\]&lt;/span&gt; remains unobserved.&lt;/p&gt;
&lt;p&gt;We then simulate 100 times with &lt;span class=&#34;math display&#34;&gt;\[k\]&lt;/span&gt; ranging from 1 to 10; number of observations from &lt;span class=&#34;math display&#34;&gt;\[e^4\]&lt;/span&gt; to &lt;span class=&#34;math display&#34;&gt;\[e^8\]&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Since there are many simulations, we used “snowfall” library to speed things up.&lt;/p&gt;
&lt;p&gt;For raw code, please visit &lt;a href=&#34;https://github.com/xiangao/lewbel2&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;center&gt;
&lt;iframe src=&#34;https://xiangao.shinyapps.io/lewbel2/&#34; style=&#34;border: none; width: 700px; height: 700px;&#34;&gt;
&lt;/iframe&gt;
&lt;/center&gt;
&lt;p&gt;We can see at moderate degree of heteroscedasticity, Lewbel’s estimator performs well, at reasonably large sample size. TSLS performs well since we assume we observe &lt;span class=&#34;math display&#34;&gt;\[z\]&lt;/span&gt;. At very high degree of heteroscedasticity, both OLS and Lewbel’s estimator perform well. My explanation is that when there is very high degree of heteroscedasticity, heteroscedasticity just outplays endogeneity so that OLS’ bias goes down (since we know that OLS under heteroscedasticity is consistent.), with large sample size.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
