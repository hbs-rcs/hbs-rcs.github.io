[{"authors":["admin"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://hbs-rcs.github.io/author/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/","section":"authors","summary":"","tags":null,"title":"","type":"authors"},{"authors":["Victoria L. Prince"],"categories":["Methods"],"content":" Overview Research reproducibility topic has been gaining momentum over the past decade. There have been many studies reporting inability to replicate published results and lack of necessary details in methods description. Some journals are addressing this issue by requiring access to study data and executable code. However, while this may provide some reassurance in reliability of the results, the actual choice of analytic methods could be shaped by many assumptions that might not be evident.\nThere usually isn’t one correct way to analyse data. Instead, empirical studies often have plenty of flexibility in the way data are collected and cleaned as well as in the final model specification. A data cleaning step may involve exclusion of some units with missing data or conversion of a continuous variable to a categorical one or (vice versa). There also might be models equally plausible for the outcome, but having different sets of covariates or functional forms. Each of these small steps may snowball into a reported effect that is overly favorable to researchers’ narrative.\nA relatively novel and very promising method that can help to mitigate this issue was proposed in Simonsohn, Simmons, and Nelson (2015) and is called Specification Curve Analysis (SCA). The idea behind the method is simple - the researcher is asked to consider multiple plausible ways to analyze the data and show that, jointly, the null hypothesis of no effect can be rejected. It doesn’t mean that all models must result in a statistically significant effect (though, it would make the conclusions very convincing!). However, even if the effect is detected when all specifications are tested simultaneously, this would result in a more objective inference.\n Method Details The method involves the following steps:\nidentifying the set of theoretically justified, statistically valid, and non-redundant analytic specifications; running the analysis for each specification and displaying the results graphically - this allows the readers to identify consequential specification decisions; conducting statistical tests to determine whether, as a whole, results are inconsistent with the null hypothesis.  The first two steps above are self-explanatory. However, the third step is novel. The authors (Simonsohn, Simmons, and Nelson (2020)) proposed three test statistics for the SCA:\nmedian effect estimated across all specifications;\n share of specifications that obtain a statistically significant effect in the predicted direction;\n average of Z-values across all specifications.\n  For each of them a sampling distribution can be generating by “resampling under-the-null.” This involves modifying the observed data so that the null hypothesis is known to be true, and then drawing random samples of the modified data. The test statistic of interest is then computed on each of those samples. The resulting distribution is the estimated distribution of the test statistic under the null.\n Available Tools There are several resources available to aid the implementation of the method. I organize them in a table below:\n    Language Package Name Description    R specr Available on CRAN. Provides functions to set up, run, evaluate and plot the specifications of interest. There is a lot of flexibility in model set-up. However, the package doesn’t have capability to perform the step (iii) above (i.e., the joint testing).  R rdfanalysis Available only on GitHub. A more comprehensive collection of functions that provides a self-documenting code base that allows researchers to systematically document and explore their researcher degrees of freedom when conducting analyses. Has a shiny front end that helps to explore the findings interactively.  Stata speccurve One function that can only plot the curve using coefficients stored in the e()-returns. Requires setting up and looping through the models beforehand.  Stata specurve Depends on Stata 16’s Python (v.3.6) integration and several additional Python modules. The function performs regressions as specified in a provided YAML-formatted file and plots the specification curve. Limited to reghdfe models only, but allows for various combinations of fixed effects and clustering.  Stata specc Available on SSC and is open for development on GitHub. The package appears to be very flexible in setting up models and enumerating specifications as well as plotting the curve. However, it lacks a simple example to get started.  Python specification_curve Allows to conduct analysis and plot specification curves. Flexible in model specification and very well documented. While it also can’t perform the joint test (step (iii) of the specification analysis), the author has an example of its manual implementation here.    It looks like most major statistical programming language have some version of the specification curve implemented. However, as far as I can tell, none of them are capable of performing step (iii), which, arguably, is as important as the curve itself. Therefore, for now, researches have to implement it themselves or contact RCS (research@hbs.edu) for assistance!\n Stata Example Next, I show an example in Stata that loops through several model specifications and then uses the speccurve function in Stata to plot the curve. Before running this code, make sure that the function is installed in Stata by running the following line:\nnet install speccurve, from(\"https://raw.githubusercontent.com/martin-andresen/speccurve/master\")\nThe code uses a classic auto data set and specifies several regression models that predict car price using available characteristics. The effect of interest is the coefficient estimated for the indicator foreign.\nclear all sysuse auto, clear loc no=0 * enumerationg many different specifications using a loop foreach m in \u0026quot;\u0026quot; \u0026quot;mpg\u0026quot; { foreach tr in \u0026quot;\u0026quot; \u0026quot;trunk\u0026quot; { foreach wt in \u0026quot;\u0026quot; \u0026quot;weight\u0026quot; { foreach ln in \u0026quot;\u0026quot; \u0026quot;length\u0026quot; { foreach hr in \u0026quot;\u0026quot; \u0026quot;headroom\u0026quot; { qui reg price foreign `m\u0026#39; `tr\u0026#39; `wt\u0026#39; `ln\u0026#39; `hr\u0026#39; eststo md`no\u0026#39; loc ++no } } } } } * plotting a SC with foreign as a parameter of interest speccurve *, param(foreign) controls title(SCA for the effect of foreigh) graph export \u0026quot;speccurve1.svg\u0026quot;, replace (1978 Automobile Data) (file speccurve1.svg written in SVG format) The code above produced the following specification curve:\nLooks like including the weight variable in the model had a notable effect on the coefficient for foreign. Function speccurve is somewhat limited in that it doesn’t work with models that have factors as controls. Next, I show a workaround for the latter case:\nclear all sysuse auto, clear egen headroom_c = group(headroom) loc no=0 foreach m in \u0026quot;\u0026quot; \u0026quot;mpg\u0026quot; { foreach tr in \u0026quot;\u0026quot; \u0026quot;trunk\u0026quot; { foreach wt in \u0026quot;\u0026quot; \u0026quot;weight\u0026quot; { foreach ln in \u0026quot;\u0026quot; \u0026quot;length\u0026quot; { foreach hr in \u0026quot;\u0026quot; \u0026quot;headroom\u0026quot; \u0026quot;i.headroom_c\u0026quot;{ qui reg price foreign `m\u0026#39; `tr\u0026#39; `wt\u0026#39; `ln\u0026#39; `hr\u0026#39; qui estadd scalar mpgv = 0, replace qui estadd scalar trunkv = 0, replace qui estadd scalar weightv = 0, replace qui estadd scalar lengthv = 0, replace foreach vr in m tr wt ln { if \u0026quot;``vr\u0026#39;\u0026#39;\u0026quot;!=\u0026quot;\u0026quot; qui estadd scalar ``vr\u0026#39;\u0026#39;v = 1, replace } qui estadd scalar headroomv = 0 qui estadd scalar iheadroom_cv = 0 local vname = subinstr(\u0026quot;`hr\u0026#39;\u0026quot;, \u0026quot;.\u0026quot;, \u0026quot;\u0026quot;, .) qui estadd scalar `vname\u0026#39;v = 1, replace eststo md`no\u0026#39; loc ++no } } } } } * The code below produces an error: *speccurve *, param(foreign) controls title(SCA for the effect of foreigh) * Workaround: speccurve *, param(foreign) level(95) graphopts(legend(pos(1))) title(SCA for auto dataset) panel(mpgv trunkv weightv lengthv headroomv iheadroom_cv) graph export \u0026quot;speccurve2.svg\u0026quot;, replace (1978 Automobile Data) (file speccurve2.svg written in SVG format) The code implements models that have headroom included as a factor or as a continuous variable. Note that the first call for speccurve would produce an error due to a bug in the function. However, the second call produces the following specification curve:\nOne can also output a table with numerical results:\nmatlist r(table)  | specno modelno estimate min95 max95 mpgv trunkv weightv lengthv headroomv iheadro~v -------------+------------------------------------------------------------------------------------------------------------------------- md0 | 1 1 312.2587 -1191.708 1816.225 0 0 0 0 0 0 md2 | 2 3 364.925 -1419.362 2149.212 0 0 0 0 0 1 md1 | 3 2 577.8125 -992.5493 2148.174 0 0 0 0 1 0 md14 | 4 15 740.7716 -960.3329 2441.876 0 1 0 0 0 1 md13 | 5 14 1128.818 -393.3118 2650.948 0 1 0 0 1 0 md12 | 6 13 1190.155 -326.8468 2707.157 0 1 0 0 0 0 md26 | 7 27 1327.396 -294.4929 2949.285 1 0 0 0 0 1 md38 | 8 39 1376.011 -230.2271 2982.249 1 1 0 0 0 1 md25 | 9 26 1714.109 292.4855 3135.733 1 0 0 0 1 0 md24 | 10 25 1767.292 371.2169 3163.368 1 0 0 0 0 0 md37 | 11 38 1825.733 408.1118 3243.355 1 1 0 0 1 0 md36 | 12 37 1887.461 468.5866 3306.335 1 1 0 0 0 0 md41 | 13 42 2196.194 517.1768 3875.212 1 1 0 1 0 1 md29 | 14 30 2247.635 591.1235 3904.146 1 0 0 1 0 1 md17 | 15 18 2294.095 616.0623 3972.129 0 1 0 1 0 1 md5 | 16 6 2352.064 696.5941 4007.534 0 0 0 1 0 1 md40 | 17 41 2615.666 1084.272 4147.059 1 1 0 1 1 0 md27 | 18 28 2644.771 1125.227 4164.315 1 0 0 1 0 0 md28 | 19 29 2644.847 1133.077 4156.616 1 0 0 1 1 0 md39 | 20 40 2670.519 1133.691 4207.347 1 1 0 1 0 0 md16 | 21 17 2774.021 1233.682 4314.361 0 1 0 1 1 0 md3 | 22 4 2801.143 1273.549 4328.737 0 0 0 1 0 0 md4 | 23 5 2801.899 1281.258 4322.54 0 0 0 1 1 0 md15 | 24 16 2827.236 1282.39 4372.082 0 1 0 1 0 0 md23 | 25 24 3072.365 1665.236 4479.495 0 1 1 1 0 1 md47 | 26 48 3079.179 1643.422 4514.937 1 1 1 1 0 1 md20 | 27 21 3116.728 1652.392 4581.064 0 1 1 0 0 1 md8 | 28 9 3132.815 1688.75 4576.88 0 0 1 0 0 1 md11 | 29 12 3146.808 1750.304 4543.312 0 0 1 1 0 1 md35 | 30 36 3148.211 1721.962 4574.459 1 0 1 1 0 1 md44 | 31 45 3162.517 1671.851 4653.184 1 1 1 0 0 1 md32 | 32 33 3179.193 1706.637 4651.749 1 0 1 0 0 1 md46 | 33 47 3502.516 2193.975 4811.056 1 1 1 1 1 0 md22 | 34 23 3526.83 2250.662 4802.999 0 1 1 1 1 0 md34 | 35 35 3545.345 2248.433 4842.256 1 0 1 1 1 0 md33 | 36 34 3550.194 2242.594 4857.793 1 0 1 1 0 0 md45 | 37 46 3557.085 2235.3 4878.871 1 1 1 1 0 0 md10 | 38 11 3570.379 2305.781 4834.976 0 0 1 1 1 0 md9 | 39 10 3573.092 2297.992 4848.191 0 0 1 1 0 0 md21 | 40 22 3580.051 2290.845 4869.256 0 1 1 1 0 0 md7 | 41 8 3623.75 2316.374 4931.127 0 0 1 0 1 0 md19 | 42 20 3631.585 2310.07 4953.101 0 1 1 0 1 0 md6 | 43 7 3637.001 2303.885 4970.118 0 0 1 0 0 0 md31 | 44 32 3648.619 2310.079 4987.159 1 0 1 0 1 0 md43 | 45 44 3654.777 2302.875 5006.679 1 1 1 0 1 0 md30 | 46 31 3673.06 2308.909 5037.212 1 0 1 0 0 0 md18 | 47 19 3686.447 2352.692 5020.201 0 1 1 0 0 0 md42 | 48 43 3711.123 2346.938 5075.308 1 1 1 0 0 0   References Simonsohn, Uri, Joseph P Simmons, and Leif D Nelson. 2015. “Better p-Curves: Making p-Curve Analysis More Robust to Errors, Fraud, and Ambitious p-Hacking, a Reply to Ulrich and Miller (2015).”  ———. 2020. “Specification Curve Analysis.” Nature Human Behaviour 4 (11): 1208–14.    ","date":1633824000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1633824000,"objectID":"9f6faaa26739a2b99ecb3b953ad135d6","permalink":"https://hbs-rcs.github.io/post/specification-curve-analysis/","publishdate":"2021-10-10T00:00:00Z","relpermalink":"/post/specification-curve-analysis/","section":"post","summary":"Overview Research reproducibility topic has been gaining momentum over the past decade. There have been many studies reporting inability to replicate published results and lack of necessary details in methods description.","tags":["research reprodicibility","specification curve analysis","Stata"],"title":"Specification Curve Analysis: Overview and Stata Example","type":"post"},{"authors":["Ista Zahn"],"categories":["R"],"content":" I recently used R for a moderately complicated scraping task, and found that using tools and techniques from the tidyverse made for a very pleasant web scraping experience, especially for retrieving nested data. In particular, the nest/unnest functions in the tidyr package make it easy to implement breadth-first scrapers in R by nesting the results from each level and then expanding to a tabular structure. This approach has the advantage of making it easy to follow the program logic, and it also makes it very easy to store retrieved values in a convenient format.\nExample: HBS workshops As a simple example of a website with a nested structure consider https://training.rcs.hbs.org/workshops. This site lists workshops nested within categories.\nStart at the top and store results in tibbles Using the tidyverse packages along with rvest make web scraping in R more convenient.\nlibrary(tidyverse) library(rvest) To retrieve workshop information from https://training.rcs.hbs.org we can start by creating a tibble to store the data we will retrieve from the site. To begin with this tibble has only one row and one column containing the URL of the starting page. This might seem like a strange way to start, but it helps us keep a consistent and clean pattern as we descend through the nested structure of the website.\nws_data \u0026lt;- tibble(start_url = \u0026quot;https://training.rcs.hbs.org/workshops\u0026quot;)  Store retrieved data in list columns and unnest as needed Next we mutate the data, reading the page containing the outer-most collection and extracting the information we need. The information we extract includes URLs at the next level of the tree we are traversing. Because we will retrieve multiple elements we store the result in a list-column.\nws_data \u0026lt;- ws_data %\u0026gt;% mutate(category = map(start_url, ~ read_html(.) %\u0026gt;% html_nodes(\u0026quot;.menu-depth-2 a\u0026quot;) %\u0026gt;% {tibble(name = html_text(.), url = html_attr(., \u0026quot;href\u0026quot;))}) ) glimpse(ws_data) ## Observations: 1 ## Variables: 2 ## $ start_url \u0026lt;chr\u0026gt; \u0026quot;https://training.rcs.hbs.org/workshops\u0026quot; ## $ category \u0026lt;list\u0026gt; [\u0026lt;tbl_df[7 x 2]\u0026gt;] Our data structure still only has one row, but we can easily expand it so that it has one row per category.\nws_data \u0026lt;- ws_data %\u0026gt;% unnest(category, names_sep = \u0026quot;_\u0026quot;, keep_empty = TRUE) glimpse(ws_data) ## Observations: 7 ## Variables: 3 ## $ start_url \u0026lt;chr\u0026gt; \u0026quot;https://training.rcs.hbs.org/workshops\u0026quot;, \u0026quot;https://tr... ## $ category_name \u0026lt;chr\u0026gt; \u0026quot;HBS Grid Training \u0026quot;, \u0026quot;R\u0026quot;, \u0026quot;Stata\u0026quot;, \u0026quot;Python\u0026quot;, \u0026quot;Other ... ## $ category_url \u0026lt;chr\u0026gt; \u0026quot;https://training.rcs.hbs.org/compute-grid-training\u0026quot;,... Each of the categories contains one or more workshops, so the next step is to iterate over categories and retrieve the all the workshop links. Because we want to retrieve more than one value for each category we store the result in a list-column.\nws_data \u0026lt;- ws_data %\u0026gt;% mutate(workshop = map(category_url, ~ read_html(.) %\u0026gt;% html_nodes(\u0026quot;.menu-depth-3 a\u0026quot;) %\u0026gt;% {tibble(name = html_text(.), url = html_attr(., \u0026quot;href\u0026quot;))}) ) glimpse(ws_data) ## Observations: 7 ## Variables: 4 ## $ start_url \u0026lt;chr\u0026gt; \u0026quot;https://training.rcs.hbs.org/workshops\u0026quot;, \u0026quot;https://tr... ## $ category_name \u0026lt;chr\u0026gt; \u0026quot;HBS Grid Training \u0026quot;, \u0026quot;R\u0026quot;, \u0026quot;Stata\u0026quot;, \u0026quot;Python\u0026quot;, \u0026quot;Other ... ## $ category_url \u0026lt;chr\u0026gt; \u0026quot;https://training.rcs.hbs.org/compute-grid-training\u0026quot;,... ## $ workshop \u0026lt;list\u0026gt; [\u0026lt;tbl_df[0 x 2]\u0026gt;, \u0026lt;tbl_df[5 x 2]\u0026gt;, \u0026lt;tbl_df[2 x 2]\u0026gt;, ... As before we unnest the data, making sure to keep empty rows.\nws_data \u0026lt;- ws_data %\u0026gt;% unnest(workshop, names_sep = \u0026quot;_\u0026quot;, keep_empty = TRUE) glimpse(ws_data) ## Observations: 18 ## Variables: 5 ## $ start_url \u0026lt;chr\u0026gt; \u0026quot;https://training.rcs.hbs.org/workshops\u0026quot;, \u0026quot;https://tr... ## $ category_name \u0026lt;chr\u0026gt; \u0026quot;HBS Grid Training \u0026quot;, \u0026quot;R\u0026quot;, \u0026quot;R\u0026quot;, \u0026quot;R\u0026quot;, \u0026quot;R\u0026quot;, \u0026quot;R\u0026quot;, \u0026quot;Stata... ## $ category_url \u0026lt;chr\u0026gt; \u0026quot;https://training.rcs.hbs.org/compute-grid-training\u0026quot;,... ## $ workshop_name \u0026lt;chr\u0026gt; NA, \u0026quot;Introduction to R\u0026quot;, \u0026quot;Introduction to R Graphics ... ## $ workshop_url \u0026lt;chr\u0026gt; NA, \u0026quot;https://training.rcs.hbs.org/introduction-r\u0026quot;, \u0026quot;h...  Putting it all together As simple as it is, the code examples above can be simplified even further by modularizing the data processing functions. Here is the whole simplified program for retrieving workshop information, in less than 20 lines of code.\nlibrary(tidyverse) library(rvest) get_links \u0026lt;- function(url, css) { read_html(url) %\u0026gt;% html_nodes(css) %\u0026gt;% {tibble(name = html_text(.), url = html_attr(., \u0026quot;href\u0026quot;))} } ws_data \u0026lt;- tibble(start_url = \u0026quot;https://training.rcs.hbs.org/workshops\u0026quot;) ws_data \u0026lt;- ws_data %\u0026gt;% mutate(category = map(start_url, get_links, css = \u0026quot;.menu-depth-2 a\u0026quot;)) %\u0026gt;% unnest(category, names_sep = \u0026quot;_\u0026quot;, keep_empty = TRUE) %\u0026gt;% mutate(workshop = map(category_url, get_links, css = \u0026quot;.menu-depth-3 a\u0026quot;)) %\u0026gt;% unnest(workshop, names_sep = \u0026quot;_\u0026quot;, keep_empty = TRUE) glimpse(ws_data) ## Observations: 18 ## Variables: 5 ## $ start_url \u0026lt;chr\u0026gt; \u0026quot;https://training.rcs.hbs.org/workshops\u0026quot;, \u0026quot;https://tr... ## $ category_name \u0026lt;chr\u0026gt; \u0026quot;HBS Grid Training \u0026quot;, \u0026quot;R\u0026quot;, \u0026quot;R\u0026quot;, \u0026quot;R\u0026quot;, \u0026quot;R\u0026quot;, \u0026quot;R\u0026quot;, \u0026quot;Stata... ## $ category_url \u0026lt;chr\u0026gt; \u0026quot;https://training.rcs.hbs.org/compute-grid-training\u0026quot;,... ## $ workshop_name \u0026lt;chr\u0026gt; NA, \u0026quot;Introduction to R\u0026quot;, \u0026quot;Introduction to R Graphics ... ## $ workshop_url \u0026lt;chr\u0026gt; NA, \u0026quot;https://training.rcs.hbs.org/introduction-r\u0026quot;, \u0026quot;h...   Conclusions The key pattern is mutate to a list-column containing tibbles and then unnest to maintain a tabular record of URLs and results at each level. This expands the data structure as you descend through each level, resulting in a nice clean tabular structure at the end. At each level unest(names_sep = \"_\") produces a consistent naming scheme with minimal effort. Finally, this pattern generalizes easily to cases where you wish to retrieve multiple pieces of information at each level.\n ","date":1578614400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578614400,"objectID":"bfe67d8f0369012593e900af11b25e46","permalink":"https://hbs-rcs.github.io/post/easier-web-scraping-in-r-with-tidyverse/","publishdate":"2020-01-10T00:00:00Z","relpermalink":"/post/easier-web-scraping-in-r-with-tidyverse/","section":"post","summary":"I recently used R for a moderately complicated scraping task, and found that using tools and techniques from the tidyverse made for a very pleasant web scraping experience, especially for retrieving nested data.","tags":["R","web scraping"],"title":"Easier web scraping in R with tidyverse","type":"post"},{"authors":["Victoria L. Prince"],"categories":["Methods"],"content":"  Recently, I found myself researching the latest developments on the topic of Synthetic Controls (SC) for one of the projects. I had the pleasure of learning about the method from its co-author Prof. Jens Hainmueller back in 2011, when it had just started gaining momentum. Wondering what new insights have been gathered over the last 8 years by applied researchers utilizing this method for causal inference problems, I outlined interesting highlights in this post. Overview The method was first introduced in Abadie and Gardeazabal (2003) to estimate a causal effect of a political conflict on region’s per capita GDP. In the spirit of classical matching methods for causal inference (Rosenbaum (2002)), the authors proposed a procedure for finding a group of control regions such that their weighted average would match the specified pre-intervention characteristics (including the evolution of the outcome) of the affected region.\nHere is a more technical description: suppose that we observe \\(J+1\\) units in time periods \\(1,2,..., T\\) and unit #1 is exposed to the intervention during periods \\(T_0+1, ...,T\\). Let \\(Y^C_{jt}\\) be the outcome that would be observed (i.e., the potential outcome) for unit \\(j\\) at time \\(t\\) in the absence of the intervention. For units 2 through \\(J+1\\), the observed outcome \\(Y_{jt}\\) is equivalent to \\(Y^C_{jt}\\). On the other hand, let \\(Y^I_{jt}\\) be the potential outcome under the intervention. Therefore, \\(Y_{1t}=Y^I_{1t}\\) for \\(t=T_0+1, ...,T\\).\nOur goal is to estimate the causal treatment effect on the treated unit: \\[ \\alpha_{1t} = Y^I_{jt} - Y^C_{jt}, \\text{for } t=T_0+1,..., T. \\] Suppose we also observe a vector of \\(R\\) covariates for each unit \\(j\\), \\(\\textbf{Z}_j\\), that are predictive of the outcome and “unaffected by the treatment”. The SC method assumes that we are able to find a set of nonnegative weights \\(\\textbf{W}=(w_2,...,w_{J+1})\u0026#39;\\) that sum up to 1 and satisfy the following \\((R+T_0)\\) conditions exactly: \\[ \\sum_{j=2}^{J+1}w_j\\textbf{Z}_j=\\textbf{Z}_1\\text{ and }\\sum_{j=2}^{J+1}w_jY_{jt}=Y_{1t}, \\text{ for }t=1,...,T_0. \\]\nIn practice, of course, it is unlikely that we would find exact matches for all available characteristics. Therefore, we find weights that minimize a chosen measure of discrepancy. Let \\(\\textbf{X}_1\\) be a \\((R+T_0)\\times 1\\) vector of pre-intervention characteristics for the treated unit. Similarly, \\(\\textbf{X}_0\\) is a \\((R+T_0) \\times J\\) matrix of the same variables for the donor pool. The original paper (Abadie, Diamond, and Hainmueller (2010)) minimizes the following distance measure: \\[ ||\\textbf{X}_1-\\textbf{X}_0\\textbf{W}||_{\\textbf{V}} = \\sqrt{(\\textbf{X}_1-\\textbf{X}_0\\textbf{W})\u0026#39;\\textbf{V}(\\textbf{X}_1-\\textbf{X}_0\\textbf{W})} \\qquad\\qquad(1) \\] In words, SC calculation produces two outputs: matrix \\(\\textbf{V}\\), which weighs variables included in the minimization differently depending on how well they predict pre-intervention outcomes, and an array of weights \\(\\textbf{W}\\) for control units.\nThere are various ways to choose \\(\\textbf{V}\\), including subjective assessment of predictive power of \\(\\textbf{X}\\), regression, minimize prediction error, or cross-validation. When \\(\\textbf{V}\\) is set to \\(\\textbf{I}\\), the identity matrix, then all characteristics are assumed to have equal weights, and the distance defined in (1) can be interpreted as the usual Euclidean distance between points \\(\\textbf{X}_1\\) and \\(\\textbf{X}_0\\textbf{W}\\) on a \\((R+T_0)\\)-dimensional space.\nNote that, once we have a synthetic control for the treated unit, the method permits estimation of a treatment effect for each post-treatment time period \\(t=T_0+1,..., T\\), as long as we observe the corresponding outcome for all controls. However, it is more common to report an aggregated post-treatment effect, e.g., \\(\\sum_{t=T_0+1}^T \\alpha_{1t}/(T-T_0)\\).\n Features and Limitations There are several attractive features of the SC method:\n It provides a systematic data-driven way of assigning weights to control units to provide a close synthetic match to a treated unit, especially if none of the observed control units fit the bill.\n When potential outcomes are related linearly to observed and unobserved covariates (or factors), Abadie, Diamond, and Hainmueller (2010) showed that the estimated causal effect is unbiased even when there are unobserved confounding factors that vary with time (though, this feature as well as many other theoretical properties of the SC method rely on availability of a large number of preintervention outcomes.)\n There is an interesting parallel between a linear regression and the SC method: it turns out that, when estimating a counterfactual outcome using a naive regression approach, i.e., regressing \\(Y_{jt}\\) on \\(\\textbf{X}_0\\) post-treatment for controls (\\(t=T_0,...,T\\), \\(j=2,...,J\\)) and then using this model together with \\(\\textbf{X}_1\\) to predict \\(Y^C_{1t}\\), we can also rewrite the result as a linear combination of untreated units (see Abadie, Diamond, and Hainmueller (2015) for a proof) with weights that sum up to one. However, a conceptual difference lies in the fact that regression weights are unrestricted - they may be negative or greater than one. “As a result, estimates of counterfactuals based on linear regression may extrapolate beyond the support of comparison units.” In fact, as suggested in Abadie, Diamond, and Hainmueller (2015), one way to assess the extent of the extrapolation is to calculate the regression weights explicitly!\n It can be shown that the SC method is a special case of a “sideways” Lasso regression with a fixed value of its threshold parameter to \\(1\\) and an additional restriction on coefficients to be nonnegative and sum up to one (Kinn (2018)). The “sideways” regression refers to one where units are acting as covariates, and the time periods (and covariates \\(\\textbf{Z}\\)) serve as new “units” (e.g., observation \\(Y_{1t}\\) is regressed on \\(Y_{2t}, \\dots, Y_{(J+1)t}\\) for \\(t=1, \\dots, T_0\\)).\n The SC method was originally developed for one treated unit. However, if multiple units are affected by the event of interest, the method can be applied to each unit separately and the treatment effect summarized by computing an Average Treatment Effect on the Treated (ATT) as demonstrated in Kreif et al. (2016).\n   Practical Recommendations The topic of SCs is still an active area of research appearing regularly in methodological and applied papers. Here are some useful tips that I came across while going over the literature:\n There are many (sometimes, conflicting!) recommendations on what should be included as part of \\(\\textbf{X}_0\\) and \\(\\textbf{X}_1\\), and I think the jury is still out. Of course, there is no doubt that the chosen covariates should be predictive of the outcome. That said, it is a bit less apparent how to strike a balance between the length of the pretreatment outcome window and a set of background characteristics that should be used to construct \\(\\textbf{X}\\) matrices.\n On one hand, many theoretical properties of the procedure were derived asymptotically, assuming infinite pretreatment window. Moreover, Botosaru and Ferman (2019) show that a “perfect balance on pre-treatment outcomes does not generally imply an approximate balance for all covariates, even when they are all relevant”, concluding that, “although there may be advantages to balancing on covariates to construct the SC estimator, a perfect balance on covariates should not be required for the SC method as long as there is a perfect balance on a long set of pre-treatment outcomes.”\n On the other hand Kaul et al. (2015) argues that one should not use covariates simultaneously with all available preintervention outcomes, as, under certain conditions, this may renders covariates to be irrelevant. With that, Abadie, Diamond, and Hainmueller (2015) states that “it is of crucial importance that synthetic controls closely reproduce the values that variables with a large predictive power on the outcome of interest take for the unit affected by the intervention.” Thus, it is important that the chosen covariates are allowed to influence the estimated synthetic control.\n  One should always inspect the quality of the match and discard synthetic controls that do not closely trace the preintervention outcome. However, there is still debate whether a perfect balance on pre-treatment covariates is strictly necessary (Botosaru and Ferman (2017)).\n Abadie, Diamond, and Hainmueller (2010) emphasizes that SC method should be avoided in cases where the treated unit lies outside the distribution of control units. In other words, values of pretreatment variables for the affected unit cannot be outside any linear combination of the donor pool values. If no convex combination of control units can reconstruct the treated unit then counterfactual estimates could be severely biased. In practice, one can start with inspecting the ranges of outcomes and covariates during the pre-treatment period among controls and making sure that they at least overlap with those for the treated unit.\n In addition to the extrapolation issues, we should watch out for possible interpolation bias by making sure that the variables used to compute the weights have values among the donor pool units that are similar to those observed for the affected unit. To reduce interpolation biases, it is recommended to restrict the donor pool to units that are “similar” to the treated one(s).\n Implicit in the notation above is the usual assumption of no interference between units - or that outcomes of the untreated units are not affected by the intervention implemented in the treated unit. For example, the policy in the affected region cannot affect the outcome in the pool of donor regions.\n Finally, when dealing with multiple outcomes, a procedure that uses distance measure given in (1) will likely construct a different synthetic control for each outcome, even if the same set of pretreatment characteristics is being matched on. This is due to the fact that the weighting matrix \\(\\textbf{V}\\) is computed separately for each outcome. If we preset \\(\\textbf{V}\\) to an identity (or any other positive-definite) matrix and use the same pretreatment outcome values to construct \\(\\textbf{X}_0\\) and \\(\\textbf{X}_1\\), the same synthetic control will be constructed for each unit regardless of the outcome considered.\n As a special case, if \\(\\textbf{X}_0\\) and \\(\\textbf{X}_1\\) do not contain any pretreatment characteristics, setting \\(\\textbf{V}\\) to \\(\\textbf{I}\\) would imply that we assume that all pretreatment outcome lags affect post-treatment values equally.   This list is by no means exhaustive. I’m sure, as the SC method matures, our understanding of its strengths and limitations as well as advice on practical implementation will continue evolving.\n References Abadie, Alberto, Alexis Diamond, and Jens Hainmueller. 2010. “Synthetic Control Methods for Comparative Case Studies: Estimating the Effect of Californias Tobacco Control Program.” Journal of the American Statistical Association 105 (490): 493–505.  ———. 2015. “Comparative Politics and the Synthetic Control Method.” American Journal of Political Science 59 (2): 495–510.  Abadie, Alberto, and Javier Gardeazabal. 2003. “The Economic Costs of Conflict: A Case Study of the Basque Country.” American Economic Review 93 (1): 113–32. https://doi.org/10.1257/000282803321455188.  Botosaru, Irene, and Bruno Ferman. 2017. “On the Role of Covariates in the Synthetic Control Method.” https://mpra.ub.uni-muenchen.de/81940/.  ———. 2019. “On the role of covariates in the synthetic control method.” The Econometrics Journal 22 (2): 117–30. https://doi.org/10.1093/ectj/utz001.  Kaul, Ashok, Stefan Klößner, Gregor Pfeifer, and Manuel Schieler. 2015. “Synthetic Control Methods: Never Use All Pre-Intervention Outcomes Together with Covariates.”  Kinn, Daniel. 2018. “Synthetic Control Methods and Big Data.” arXiv Preprint arXiv:1803.00096.  Kreif, Noémi, Richard Grieve, Dominik Hangartner, Alex James Turner, Silviya Nikolova, and Matt Sutton. 2016. “Examination of the Synthetic Control Method for Evaluating Health Policies with Multiple Treated Units.” Health Economics 25 (12): 1514–28.  Rosenbaum, Paul R. 2002. “Overt Bias in Observational Studies.” In Observational Studies, 71–104. Springer.    ","date":1568246400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568246400,"objectID":"25283f496cce1c4943031baa2b246fe5","permalink":"https://hbs-rcs.github.io/post/synthetic-controls/","publishdate":"2019-09-12T00:00:00Z","relpermalink":"/post/synthetic-controls/","section":"post","summary":"Recently, I found myself researching the latest developments on the topic of Synthetic Controls (SC) for one of the projects. I had the pleasure of learning about the method from its co-author Prof.","tags":["synthetic controls","causal inference"],"title":"Synthetic Controls: brief overview with practical recommmendations","type":"post"},{"authors":["Andrew Marder","Victoria L. Prince"],"categories":["R"],"content":" Let’s walk through some steps for web scraping with R. On this Wikipedia page there is a table of visa requirements that I want to scrape. Let’s use the rvest package to get the HTML associated with that page:\nlibrary(rvest) html \u0026lt;- read_html(\u0026quot;https://en.wikipedia.org/wiki/Visa_requirements_for_United_States_citizens\u0026quot;) html ## {html_document} ## \u0026lt;html class=\u0026quot;client-nojs\u0026quot; lang=\u0026quot;en\u0026quot; dir=\u0026quot;ltr\u0026quot;\u0026gt; ## [1] \u0026lt;head\u0026gt;\\n\u0026lt;meta http-equiv=\u0026quot;Content-Type\u0026quot; content=\u0026quot;text/html; charset= ... ## [2] \u0026lt;body class=\u0026quot;mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-sub ... Now let’s use the html_nodes() function to extract the table of interest. I used Chrome’s Developer Tools to get the XPath of the table (see notes at the end of the post on how to do it):\nreferenced_by \u0026lt;- html_node(html, xpath=\u0026#39;//*[@id=\u0026quot;mw-content-text\u0026quot;]/div/table[1]\u0026#39;) referenced_by ## {html_node} ## \u0026lt;table class=\u0026quot;sortable wikitable\u0026quot;\u0026gt; ## [1] \u0026lt;tbody\u0026gt;\\n\u0026lt;tr\u0026gt;\\n\u0026lt;th style=\u0026quot;width:18%;\u0026quot;\u0026gt;Country\\n\u0026lt;/th\u0026gt;\\n\u0026lt;th style=\u0026quot;wid ... Now let’s convert that HTML table into a data frame.\nvisa_requirements \u0026lt;- html_table(referenced_by) head(visa_requirements[,1:3]) ## Country Visa requirement Allowed stay ## 1 Afghanistan Visa required[2][3] ## 2 Albania Visa not required[5][6] 1 year[7] ## 3 Algeria Visa required[8][9] ## 4 Andorra Visa not required[10] 3 months[11][12] ## 5 Angola eVisa[13][14][15] 30 days ## 6 Antigua and Barbuda Visa not required[18][19] 6 months[20] Finally, we can clean footnote references from columns 2 and 3 using gsub().\nvisa_requirements \u0026lt;- html_table(referenced_by) visa_requirements$`Visa requirement` \u0026lt;- gsub(\u0026quot;\\\\[.*\u0026quot;,\u0026quot;\u0026quot;,visa_requirements$`Visa requirement`) visa_requirements$`Allowed stay` \u0026lt;- gsub(\u0026quot;\\\\[.*\u0026quot;,\u0026quot;\u0026quot;,visa_requirements$`Allowed stay`) head(visa_requirements[,1:3]) ## Country Visa requirement Allowed stay ## 1 Afghanistan Visa required ## 2 Albania Visa not required 1 year ## 3 Algeria Visa required ## 4 Andorra Visa not required 3 months ## 5 Angola eVisa 30 days ## 6 Antigua and Barbuda Visa not required 6 months We’ve only scratched the surface here, but hope this example shows off the convenience of the rvest package.\nNotes:\n Chrome’s Developer Tools can be launched by right-clicking on the page and selecting Inspect. Then, mouse over the html code listed under elements and find a place that highlights the table of interest on the right. Then right-click again, select Copy -\u0026gt; Copy XPath.\n If writing custom scraping scripts in R is not the route you’d want to take, our team has recently discovered a very nice and flexible commercial tool Mozenda. As of 8/8/2019, they offer a 30-day trial of a full product.\n  ","date":1565222400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565222400,"objectID":"d8f145954a498b433e446dabb90ada15","permalink":"https://hbs-rcs.github.io/post/2019-08-08-web-scraping-in-r/","publishdate":"2019-08-08T00:00:00Z","relpermalink":"/post/2019-08-08-web-scraping-in-r/","section":"post","summary":"Let’s walk through some steps for web scraping with R. On this Wikipedia page there is a table of visa requirements that I want to scrape. Let’s use the rvest package to get the HTML associated with that page:","tags":["R","web scraping"],"title":"Web Scraping in R","type":"post"},{"authors":null,"categories":null,"content":"If you\u0026rsquo;re new to Make, check out Mike Bostock\u0026rsquo;s article Why Use Make, it\u0026rsquo;s excellent! This post is intended as a follow-up to Mike\u0026rsquo;s introduction.\nI love Makefiles because they allow me to describe my workflow as a directed acyclic graph. Makefiles are a great example of declarative programming. When I specify a rule like the following:\ntargetfile: sourcefile command  I am saying that the targetfile depends on the sourcefile. Whenever I issue the command make targetfile, Make checks to see if anything in the targetfile\u0026rsquo;s dependency graph needs to be recompiled and it runs the necessary commands to bring the targetfile up to date. I enjoy using Make because it provides:\n A framework for writing reproducible research. A transparent caching mechanism. Often downloading data can take a lot of time, while cleaning data once it\u0026rsquo;s downloaded is relatively fast. By breaking these into two rules. I only need to download the data once and then I can focus on data cleaning and data analysis without re-running code from previous steps. A mechanism for building projects in parallel. Using make -j (or lsmake on the Grid) tells Make to run commands in parallel. All I have to specify is how each file in my project is built, Make figures out how to run everything in parallel.  Makefiles as Glue I often find myself using different tools for different jobs. I like using Python for web scraping, R for data visualization, and Stata for certain statistical models. Makefiles make it easy to combine different tools:\nDATA = data/processed/data.csv $(DATA): src/download.py python $\u0026lt; reports/figures/graph.pdf: src/graph.R $(DATA) Rscript $\u0026lt; reports/figures/table.tex: src/table.do $(DATA) stata-mp -b do $\u0026lt;  To understand the syntax above, read about variables and automatic variables.\nCompiling a Bunch of Files at Once Often the projects I work on require a lot of analyses. Imagine the following directory structure:\n. ├── Makefile ├── data │ └── processed │ └── data.dta └── src └── tables ├── table1.do ├── table2.do └── table3.do  Putting the following two rules in my Makefile allows me to recompile all tables with a single make tables command:\n%.log: %.do data/processed/data.dta cd $(dir $\u0026lt;); stata-mp -b do $(notdir $\u0026lt;) DO_FILES = $(shell find src/tables -name \u0026quot;*.do\u0026quot;) LOG_FILES = $(patsubst %.do,%.log,$(DO_FILES)) tables: $(LOG_FILES)  To understand the syntax above, read about pattern rules and functions.\nWorking with Databases Make cannot inspect when a database table was last modified. Imagine we have a script that updates a table of patent data. We can work this into a Makefile by creating a corresponding file to keep track of when the database table was last updated. A rule like the following will allow Make to keep track of when the patents table was last updated:\ndata/processed/patents.table: src/patents.py python $\u0026lt; echo \u0026quot;Data stored in PostgreSQL database.\u0026quot; \u0026gt; $@  Conclusion There are a crazy number of alternatives to Make. Here are just a few:\n Ant CMake Gradle Luigi Maven Ninja Rake SCons Waf  For the most part, I\u0026rsquo;ve found Make does everything I need it to do. Although the syntax is ugly, I appreciate how it ships with Unix-like operating systems (I find it annoying when I want to install a project and first I have to install the installation tool). That being said, I am very interested to experiment with Luigi (I\u0026rsquo;ve heard great things).\nIf you want to learn more about how I structure my projects, check out Cookiecutter Data Science.\n","date":1497830400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1497830400,"objectID":"976fe87441fd66e15c0bfbe2bf004dcf","permalink":"https://hbs-rcs.github.io/post/make/","publishdate":"2017-06-19T00:00:00Z","relpermalink":"/post/make/","section":"post","summary":"If you\u0026rsquo;re new to Make, check out Mike Bostock\u0026rsquo;s article Why Use Make, it\u0026rsquo;s excellent! This post is intended as a follow-up to Mike\u0026rsquo;s introduction.\nI love Makefiles because they allow me to describe my workflow as a directed acyclic graph.","tags":["programming"],"title":"Makefile Tips","type":"post"},{"authors":null,"categories":null,"content":"If you\u0026rsquo;re new to Make, check out Mike Bostock\u0026rsquo;s article Why Use Make, it\u0026rsquo;s excellent! This post is intended as a follow-up to Mike\u0026rsquo;s introduction.\nI love Makefiles because they allow me to describe my workflow as a directed acyclic graph. Makefiles are a great example of declarative programming. When I specify a rule like the following:\ntargetfile: sourcefile command  I am saying that the targetfile depends on the sourcefile. Whenever I issue the command make targetfile, Make checks to see if anything in the targetfile\u0026rsquo;s dependency graph needs to be recompiled and it runs the necessary commands to bring the targetfile up to date. I enjoy using Make because it provides:\n A framework for writing reproducible research. A transparent caching mechanism. Often downloading data can take a lot of time, while cleaning data once it\u0026rsquo;s downloaded is relatively fast. By breaking these into two rules. I only need to download the data once and then I can focus on data cleaning and data analysis without re-running code from previous steps. A mechanism for building projects in parallel. Using make -j (or lsmake on the Grid) tells Make to run commands in parallel. All I have to specify is how each file in my project is built, Make figures out how to run everything in parallel.  Makefiles as Glue I often find myself using different tools for different jobs. I like using Python for web scraping, R for data visualization, and Stata for certain statistical models. Makefiles make it easy to combine different tools:\nDATA = data/processed/data.csv $(DATA): src/download.py python $\u0026lt; reports/figures/graph.pdf: src/graph.R $(DATA) Rscript $\u0026lt; reports/figures/table.tex: src/table.do $(DATA) stata-mp -b do $\u0026lt;  To understand the syntax above, read about variables and automatic variables.\nCompiling a Bunch of Files at Once Often the projects I work on require a lot of analyses. Imagine the following directory structure:\n. ├── Makefile ├── data │ └── processed │ └── data.dta └── src └── tables ├── table1.do ├── table2.do └── table3.do  Putting the following two rules in my Makefile allows me to recompile all tables with a single make tables command:\n%.log: %.do data/processed/data.dta cd $(dir $\u0026lt;); stata-mp -b do $(notdir $\u0026lt;) DO_FILES = $(shell find src/tables -name \u0026quot;*.do\u0026quot;) LOG_FILES = $(patsubst %.do,%.log,$(DO_FILES)) tables: $(LOG_FILES)  To understand the syntax above, read about pattern rules and functions.\nWorking with Databases Make cannot inspect when a database table was last modified. Imagine we have a script that updates a table of patent data. We can work this into a Makefile by creating a corresponding file to keep track of when the database table was last updated. A rule like the following will allow Make to keep track of when the patents table was last updated:\ndata/processed/patents.table: src/patents.py python $\u0026lt; echo \u0026quot;Data stored in PostgreSQL database.\u0026quot; \u0026gt; $@  Conclusion There are a crazy number of alternatives to Make. Here are just a few:\n Ant CMake Gradle Luigi Maven Ninja Rake SCons Waf  For the most part, I\u0026rsquo;ve found Make does everything I need it to do. Although the syntax is ugly, I appreciate how it ships with Unix-like operating systems (I find it annoying when I want to install a project and first I have to install the installation tool). That being said, I am very interested to experiment with Luigi (I\u0026rsquo;ve heard great things).\nIf you want to learn more about how I structure my projects, check out Cookiecutter Data Science.\n","date":1497830400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1497830400,"objectID":"5d8b3da479f140b9491cd6a602861efe","permalink":"https://hbs-rcs.github.io/post/make/","publishdate":"2017-06-19T00:00:00Z","relpermalink":"/post/make/","section":"post","summary":"If you\u0026rsquo;re new to Make, check out Mike Bostock\u0026rsquo;s article Why Use Make, it\u0026rsquo;s excellent! This post is intended as a follow-up to Mike\u0026rsquo;s introduction.\nI love Makefiles because they allow me to describe my workflow as a directed acyclic graph.","tags":["programming"],"title":"Makefile Tips","type":"post"},{"authors":null,"categories":null,"content":" A simulation for OLS model In an observational study, we need to assume we have the functional form to get causal effect estimated correctly, in addtion to the assumption of treatment being exogenous.\nlibrary(MASS) library(ggplot2) library(dplyr) library(tmle) library(glmnet) set.seed(366) nobs \u0026lt;- 2000 xw \u0026lt;- .8 xz \u0026lt;- .5 zw \u0026lt;- .6 nrow \u0026lt;- 3 ncol \u0026lt;- 3 covarMat = matrix( c(1^2, xz^2, xw^2, xz^2, 1^2, zw^2, xw^2, zw^2, 1^2 ) , nrow=ncol , ncol=ncol ) mu \u0026lt;- rep(0,3) rawvars \u0026lt;- mvrnorm(n=nobs, mu=mu, Sigma=covarMat) df \u0026lt;- tbl_df(rawvars) names(df) \u0026lt;- c(\u0026#39;x\u0026#39;,\u0026#39;z\u0026#39;,\u0026#39;w\u0026#39;) df \u0026lt;- df %\u0026gt;% mutate(log.x=log(x^2), log.z=log(z^2), log.w=log(w^2), z.sqr=z^2, w.sqr=w^2) %\u0026gt;% mutate(g.var= log.w + rnorm(nobs)) %\u0026gt;% mutate(A = rbinom(nobs, 1, 1/(1+exp((g.var))))) %\u0026gt;% mutate(y0=rnorm(nobs) + log.x) %\u0026gt;% mutate(tau.true = 2 + rnorm(nobs), y1=y0+tau.true, treat=A, y = treat*y1 + (1-treat)*y0) lm1 \u0026lt;- lm(y ~ A + log.w + log.x , data=df) summary(lm1) ## ## Call: ## lm(formula = y ~ A + log.w + log.x, data = df) ## ## Residuals: ## Min 1Q Median 3Q Max ## -4.5506 -0.8372 -0.0154 0.8502 4.1624 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) 0.01267 0.04778 0.265 0.791 ## A 1.93171 0.06580 29.355 \u0026lt;2e-16 *** ## log.w 0.01105 0.01428 0.774 0.439 ## log.x 1.00162 0.01353 74.030 \u0026lt;2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 1.255 on 1996 degrees of freedom ## Multiple R-squared: 0.758, Adjusted R-squared: 0.7576 ## F-statistic: 2084 on 3 and 1996 DF, p-value: \u0026lt; 2.2e-16 lm2 \u0026lt;- lm(y ~ A , data=df) summary(lm2) ## ## Call: ## lm(formula = y ~ A, data = df) ## ## Residuals: ## Min 1Q Median 3Q Max ## -15.9102 -1.3822 0.3241 1.6933 6.4046 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) -0.92139 0.08992 -10.25 \u0026lt;2e-16 *** ## A 1.38964 0.11366 12.23 \u0026lt;2e-16 *** ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 2.459 on 1998 degrees of freedom ## Multiple R-squared: 0.06961, Adjusted R-squared: 0.06915 ## F-statistic: 149.5 on 1 and 1998 DF, p-value: \u0026lt; 2.2e-16 lm3 \u0026lt;- lm(y ~ A + w, data=df) summary(lm3) ## ## Call: ## lm(formula = y ~ A + w, data = df) ## ## Residuals: ## Min 1Q Median 3Q Max ## -15.9112 -1.3795 0.3139 1.6863 6.3468 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) -0.92056 0.08995 -10.234 \u0026lt;2e-16 *** ## A 1.38860 0.11368 12.215 \u0026lt;2e-16 *** ## w -0.03351 0.05286 -0.634 0.526 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 2.46 on 1997 degrees of freedom ## Multiple R-squared: 0.0698, Adjusted R-squared: 0.06887 ## F-statistic: 74.93 on 2 and 1997 DF, p-value: \u0026lt; 2.2e-16 lm4 \u0026lt;- lm(y ~ A + w + x, data=df) summary(lm4) ## ## Call: ## lm(formula = y ~ A + w + x, data = df) ## ## Residuals: ## Min 1Q Median 3Q Max ## -15.9109 -1.4047 0.3177 1.6926 6.4528 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) -0.91759 0.08995 -10.201 \u0026lt;2e-16 *** ## A 1.38335 0.11372 12.164 \u0026lt;2e-16 *** ## w -0.09260 0.06827 -1.356 0.175 ## x 0.09947 0.07275 1.367 0.172 ## --- ## Signif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1 ## ## Residual standard error: 2.459 on 1996 degrees of freedom ## Multiple R-squared: 0.07067, Adjusted R-squared: 0.06927 ## F-statistic: 50.6 on 3 and 1996 DF, p-value: \u0026lt; 2.2e-16 In this example, treatment assignment process is determined by logged w, and outcome is dtermined by logged x and treatment. However, what we observe is w and x. In observational studies, this happens all the time. In fact, this is an ideal situation, that we observe variables that are determinants of outcome, although we are not sure about the functional form that determines the outcome. However, this example shows that unless we have observed exactly the factors themselves (in this case logged x, w, which determines the DGP), we have biased estimates of the true treatment effect.\nModel 1 is the only model with reasonable estimate of treatment effect (which is 2 in this case). Model 2 is a model with endogeneity: A is correlated with the missing variabel logged x. Model 3 and 4 we have x and w, but not logged, therefore still biased.\nThe lesson here is the functional form does matter. However, we have no way of knowing the functional form. What can we do here?\nQ.SL.library \u0026lt;- c(\u0026quot;SL.randomForest\u0026quot;, \u0026quot;SL.glmnet\u0026quot;,\u0026quot;SL.loess\u0026quot;,\u0026quot;SL.glm\u0026quot;,\u0026quot;SL.glm.interaction\u0026quot;, \u0026quot;SL.rpart\u0026quot;,\u0026quot;SL.nnet\u0026quot;,\u0026quot;SL.bayesglm\u0026quot;,\u0026quot;SL.gam\u0026quot;,\u0026quot;SL.gbm\u0026quot;,\u0026quot;SL.step\u0026quot;,\u0026quot;SL.mean\u0026quot;) g.SL.library \u0026lt;- c(\u0026quot;SL.randomForest\u0026quot;, \u0026quot;SL.glmnet\u0026quot;,\u0026quot;SL.glm\u0026quot;,\u0026quot;SL.glm.interaction\u0026quot;, \u0026quot;SL.rpart\u0026quot;,\u0026quot;SL.nnet\u0026quot;,\u0026quot;SL.bayesglm\u0026quot;,\u0026quot;SL.gam\u0026quot;,\u0026quot;SL.gbm\u0026quot;,\u0026quot;SL.step\u0026quot;,\u0026quot;SL.mean\u0026quot;) # this one is good since both Q and g are correct (including z in it) tmle1 \u0026lt;- tmle(Y = df$y, A = df$treat, W = df[,c(\u0026#39;x\u0026#39;,\u0026#39;w\u0026#39;)], g.SL.library = g.SL.library , Q.SL.library = Q.SL.library) tmle1 ## Additive Effect ## Parameter Estimate: 2.015 ## Estimated Variance: 0.0025985 ## p-value: \u0026lt;2e-16 ## 95% Conf Interval: (1.9151, 2.115) tmle2 \u0026lt;- tmle(Y = df$y, A = df$treat, W = df[,c(\u0026#39;x\u0026#39;,\u0026#39;w\u0026#39;, \u0026#39;z\u0026#39;)], g.SL.library = g.SL.library , Q.SL.library = Q.SL.library) tmle2 ## Additive Effect ## Parameter Estimate: 2.0263 ## Estimated Variance: 0.0029254 ## p-value: \u0026lt;2e-16 ## 95% Conf Interval: (1.9202, 2.1323) We use Mark van der Laan’s TMLE method. It uses SuperLearner as the initial estimator. It’s an ensemble of mulitple machine learning algorithms. Therefore it does not need to assume the functional form of the DGP. Even if we don’t have the variables that determines the DGP of outcome, if we observe some functions (even nonlinear functions) of these variables, we can still get reasonable estimates of the treatment effect.\nIn this example, we used multiple popular machine learning algorithms in modeling both treatment assingment process and the outcome process. The first TMLE model is with x and w (note not the logged x and w which are in the true DGP), the second one with an additional variable z.\nIt seems that TMLE results are less biased than the linear models with x and w. It may not be better than the linear model with logged x and w, but in empirical studies, we often cannot assume we have the variables in the DGP, but only some proxy of the variables in the DGP. I’ll do more simulations to see whether TMLE does perform better in the situation that we are not sure about the functional form. We should expect that is the case.\nSo far TMLE can only be used when treatment is binary variable.\nIt’s about time we embrace machine learning techniques into studies of caual effect in observational studies.\n ","date":1488326400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1488326400,"objectID":"7bf9487fd1bc1b9ad89f53503be7c5c0","permalink":"https://hbs-rcs.github.io/post/2017-03-01-causal_tmle/","publishdate":"2017-03-01T00:00:00Z","relpermalink":"/post/2017-03-01-causal_tmle/","section":"post","summary":"A simulation for OLS model In an observational study, we need to assume we have the functional form to get causal effect estimated correctly, in addtion to the assumption of treatment being exogenous.","tags":["statistics","R"],"title":"Use machine learning for causal effect in observational study","type":"post"},{"authors":null,"categories":null,"content":"  In a non-linear model (for example, logit or poisson model), the interpretation of the coefficient on the interaction term is tricky. Ai and Norton (2003) points out that the interaction term coefficient is not the same as people can interpret as in a linear model; that is, how much effect of \\(x1\\) changes with the value of \\(x2\\). They interpret this as a cross\nIf we have a linear model with interaction:\n\\[ E(y) = \\beta_1 x_1 + \\beta_2 x_2 + \\beta_{12} x_1*x_2 \\]\nThen, the marginal effect\n\\[ \\frac{\\partial^2 E(y)}{\\partial x_1 \\partial x_2} = \\beta_{12} \\]\nThat is, \\(\\beta_{12}\\) is the second derivative of \\(E(y)\\) on \\(x_1\\) and \\(x_2\\). The marginal effect of \\(x_1\\)\nIn a non-linear model,\n\\[ F(E(y)) = \\beta_1 x_1 + \\beta_2 x_2 + \\beta_{12} x_1*x_2 \\]\n\\[ \\frac{\\partial^2 F(E(y))}{\\partial x_1 \\partial x_2} = \\beta_{12} \\]\nHere, the partial derivative of \\(F(E(y))\\) on \\(x_1\\) and \\(x_2\\) is still \\(\\beta_{12}\\). However, most people are interested in \\(\\frac{\\partial^2 E(y)}{\\partial x_1 \\partial x_2}\\).\n\\[ \\frac{\\partial^2 E(y)}{\\partial x_1 \\partial x_2} = \\beta_{12} G\u0026#39;() + (\\beta_{1} + \\beta_{12} x_2)(\\beta_2 + \\beta_{12} x_1) G\u0026#39;\u0026#39;()\\]\nwhere \\(G()\\) is the inverse function of \\(F()\\).\nIt is true that in a non-linear model with interaction, the marginal effect of \\(x_1\\) differs with different values of \\(x_2\\). However, even if we have a non-linear model without interaction, the marginal effect of \\(x_1\\) is still different with different values of \\(x_2\\). To see this,\n\\[ F(E(y)) = \\beta_1 x_1 + \\beta_2 x_2 \\]\n\\[ \\frac{\\partial^2 E(y)}{\\partial x_1 \\partial x_2} = (\\beta_{1} \\beta_2 ) G\u0026#39;\u0026#39;()\\]\nTherefore, when we set up our model,\n\\[ F(E(y)) = \\beta_1 x_1 + \\beta_2 x_2 + \\beta_{12} x_1*x_2 \\]\nwe have in mind that we allow interaction of \\(x_1\\) and \\(x_1\\) to interact for the effect on \\(F(E(y))\\); not on \\(E(y)\\).\nWe agree with Bill Greene, 2013. In a nonlinear model, the partial effects (as Greene calls it) is nonlinear, regardless of the model. For example, in a logit model, even if you don’t have an interaction term in your model, the effect of \\(x_1\\) will still be different for every value of \\(x_2\\), simply because it’s a nonlinear model.\nAs Greene put it at the summary section, “Build the model based on appropriate statistical procedures and principles. Statistical testing about the model specification is done at this step Hypothesis tests are about model coefficients and about the structural aspects of the model specifications. Partial effects are neither coefficients nor elements of the specification of the model. They are implications of the specified and estimated model.”\nWe also agree with Maarten Buis 2010, that we should use multiplicative effect in a non-linear model. That is, in a non-linear model,\n\\[ F(E(y)) = \\beta_1 x_1 + \\beta_2 x_2 + \\beta_{12} x_1*x_2 \\]\nWe should pay more attention to\n\\[ \\frac{\\partial^2 F(E(y))}{\\partial x_1 \\partial x_2} = \\beta_{12} \\]\nFor example, in a logit model,\n\\[ log(P(y=1)/(1-P(y=1))) = \\beta_1 x_1 + \\beta_2 x_2 + \\beta_{12} x_1*x_2 \\]\nThat is, the log of odds is a linear function of \\(x_1\\) and \\(x_2\\) and interaction. The interaction effect has the same interpretation as the linear model, in terms of log of odds.\nOr, it becomes multiplicative effect when we talk about odds ratios. Stata’s “margins” command is a great tool to calculate marginal effects in various situations, as shown in Maarten Buis 2010.\n","date":1487030400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1487030400,"objectID":"4a35926ef2219411d078e52f90ed233d","permalink":"https://hbs-rcs.github.io/post/2017-02-16-nonlinear_interaction/","publishdate":"2017-02-14T00:00:00Z","relpermalink":"/post/2017-02-16-nonlinear_interaction/","section":"post","summary":"In a non-linear model (for example, logit or poisson model), the interpretation of the coefficient on the interaction term is tricky. Ai and Norton (2003) points out that the interaction term coefficient is not the same as people can interpret as in a linear model; that is, how much effect of \\(x1\\) changes with the value of \\(x2\\).","tags":["statistics"],"title":"Interaction term in a non-linear model","type":"post"},{"authors":null,"categories":null,"content":" Interaction with two binary variables In a regression model with interaction term, people tend to pay attention to only the coefficient of the interaction term.\nLet’s start with the simpliest situation: \\(x_1\\) and \\(x_2\\) are binary and coded 0/1.\n\\[ E(y) = \\beta_1 x_1 + \\beta_2 x_2 + \\beta_{12} x_1x_2 \\]\nIn this case, we have a saturated model; that is, we have three coefficients representing additive effects from the baseline situation (both \\(x_1\\) and \\(x_2\\) being 0). There are four different situations, with four combinations of \\(x_1\\) and \\(x_2\\).\nA lot of people just pay attention to the interaction term. In the case of studying treatment effects between two groups, say female and male, that makes sense, the interaction term representing the difference between male and female in terms of treatment effect.\nIn this model:\n\\[ E(y) = \\beta_1 female + \\beta_2 treatment + \\beta_{12} female*treatment \\]\nThe two dummy-coded binary variables, female and treatment, form four combinations. The following 2x2 table represents the expected means of the four cells(combinations).\n   male female    control \\(\\beta_0\\) \\(\\beta_0 + \\beta_1\\)  treatment \\(\\beta_0 + \\beta_2\\) \\(\\beta_0 + \\beta_1 + \\beta_2 + \\beta_{12}\\)    We can see from this table that, for example,\n\\[\\beta_0=E(Y|(0,0))\\]\nthat is, \\(\\beta_0\\) is the expected mean of the cell (0,0) (male and control).\n\\[\\beta_0 + \\beta_1 =E(Y|(1,0))\\]\nthat is ,\\(\\beta_0 + \\beta_1\\) is the expected mean of the cell (1,0) (female and control). And so on.\nNow,\n\\[ \\beta_{12} = (E(Y|(1,1))-E(Y|(0,1)))-(E(Y|(1,0))-E(Y|(0,0))) \\]\nthat is, the coefficient on the interaction term is actually the difference in difference. That’s why in many situations, people are only interested in the interaction coefficient, since they are only interested in the diff-in-diff estimates. The usually diff-in-diff estimator in causal inference literature refer to something similar, instead of female vs. male, people are interested in the treatment effect difference in before and after treatment. If we simply replace female/male dummy with before/after dummy, we can use the same logic. In those situations, it’s fine to mainly focus on the interaction term coefficient.\nIn some other situations, the three coefficients are equally important. It depends on your interest. For example, if we are interested in studying differences between union member and non-union member and black vs. non-black, we may not be only interested in the interaction effect. Instead, we might be interested in all four cells, maybe all possible pairwise comparisons. In that case, we should pay attention to all three coefficients. Stata’s “margins” command is of great help if we’d like to compare the cell means.\nLet’s take a look from a sample example in Stata:\nwebuse union3 reg ln_wage i.union##i.black, r margins union#black margins union#black, pwcompare  ## ## . webuse union3 ## (National Longitudinal Survey. Young Women 14-26 years of age in 1968) ## ## . reg ln_wage i.union##i.black, r ## ## Linear regression Number of obs = 1,244 ## F(3, 1240) = 34.76 ## Prob \u0026gt; F = 0.0000 ## R-squared = 0.0762 ## Root MSE = .37699 ## ## ------------------------------------------------------------------------------ ## | Robust ## ln_wage | Coef. Std. Err. t P\u0026gt;|t| [95% Conf. Interval] ## -------------+---------------------------------------------------------------- ## 1.union | .2045053 .0291682 7.01 0.000 .1472808 .2617298 ## 1.black | -.1709034 .0308067 -5.55 0.000 -.2313425 -.1104644 ## | ## union#black | ## 1 1 | .0386275 .0516609 0.75 0.455 -.062725 .13998 ## | ## _cons | 1.657525 .0138278 119.87 0.000 1.630396 1.684653 ## ------------------------------------------------------------------------------ ## ## . margins union#black ## ## Adjusted predictions Number of obs = 1,244 ## Model VCE : Robust ## ## Expression : Linear prediction, predict() ## ## ------------------------------------------------------------------------------ ## | Delta-method ## | Margin Std. Err. t P\u0026gt;|t| [95% Conf. Interval] ## -------------+---------------------------------------------------------------- ## union#black | ## 0 0 | 1.657525 .0138278 119.87 0.000 1.630396 1.684653 ## 0 1 | 1.486621 .027529 54.00 0.000 1.432613 1.54063 ## 1 0 | 1.86203 .0256822 72.50 0.000 1.811644 1.912415 ## 1 1 | 1.729754 .0325611 53.12 0.000 1.665873 1.793635 ## ------------------------------------------------------------------------------ ## ## . margins union#black, pwcompare ## ## Pairwise comparisons of adjusted predictions ## Model VCE : Robust ## ## Expression : Linear prediction, predict() ## ## ----------------------------------------------------------------- ## | Delta-method Unadjusted ## | Contrast Std. Err. [95% Conf. Interval] ## ----------------+------------------------------------------------ ## union#black | ## (0 1) vs (0 0) | -.1709034 .0308067 -.2313425 -.1104644 ## (1 0) vs (0 0) | .2045053 .0291682 .1472808 .2617298 ## (1 1) vs (0 0) | .0722294 .0353756 .0028268 .141632 ## (1 0) vs (0 1) | .3754087 .0376487 .3015466 .4492709 ## (1 1) vs (0 1) | .2431328 .0426388 .1594807 .326785 ## (1 1) vs (1 0) | -.1322759 .0414705 -.2136359 -.0509159 ## ----------------------------------------------------------------- ## ## . What we get by using “margins union#black” is the four cell means of \\(E(Y)\\), in this case, log of wage. Then “margins union#black, pwcompare” tells us all pairwise comparison of these four cell means. Instead of only paying attention to the interaction coefficient, in this case we might be interested in some comparisons of the four different situations of union and black. In fact, in this example, despite the interaction term being insignificant, all six comparisons of the cell means turn out to have 95% confidence intervals that do not include zero.\n Interaction with continuous variables Let’s start with the simpliest situation: \\(x_1\\) and \\(x_2\\) are continuous.\n\\[ E(y) = \\beta_1 x_1 + \\beta_2 x_2 + \\beta_{12} x_1*x_2 \\]\nIn this case, we recommend “centering” \\(x_1\\) and \\(x_2\\) if they are continuous; that is, subtracting the mean value from each continuous independent variable when they are involved in the interaction term. There are two reason for it:\nTo reduce multi-collinearity. If the range of \\(x_1\\) and \\(x_2\\) include only positive numbers, then \\(x_1*x_2\\) can be highly correlated with both or one of \\(x_1\\) and \\(x_2\\). This can lead to numerical problems and unstable coefficient estimates (multi-collinearity problem).  “Centering” can reduce the correlation between the interaction term and the independent variables. If the original variables are normally distributed, interaction term after centering is actually uncorrelated with the original variables. When they are not normally distributed, centering will still reduce the correlation to a large degree.\nTo help with interpretation. In a model with interaction, \\(\\beta_1\\) represents the effect of \\(x_1\\) when \\(x_2\\) is zero. However, in many situations, zero is not within the range of \\(x_2\\). After centering, centered \\(x_2\\) at zero simply means original \\(x_2\\) at its mean value.  When we have dummy variable interacting with continuous variable, only continuous variable should be centered.\nAgain, Stata’s margins command is helpful.\nsysuse auto sum mpg gen mpg_centered=mpg-r(mean) sum mpg_centered reg price i.foreign##c.mpg_centered margins foreign, at(mpg_centered=(-3 (1) 3)) marginsplot graph export marginsplot.eps, replace ## ## . sysuse auto ## (1978 Automobile Data) ## ## . sum mpg ## ## Variable | Obs Mean Std. Dev. Min Max ## -------------+--------------------------------------------------------- ## mpg | 74 21.2973 5.785503 12 41 ## ## . gen mpg_centered=mpg-r(mean) ## ## . sum mpg_centered ## ## Variable | Obs Mean Std. Dev. Min Max ## -------------+--------------------------------------------------------- ## mpg_centered | 74 -4.03e-08 5.785503 -9.297297 19.7027 ## ## . reg price i.foreign##c.mpg_centered ## ## Source | SS df MS Number of obs = 74 ## -------------+---------------------------------- F(3, 70) = 9.48 ## Model | 183435285 3 61145094.9 Prob \u0026gt; F = 0.0000 ## Residual | 451630112 70 6451858.74 R-squared = 0.2888 ## -------------+---------------------------------- Adj R-squared = 0.2584 ## Total | 635065396 73 8699525.97 Root MSE = 2540.1 ## ## ------------------------------------------------------------------------------ ## price | Coef. Std. Err. t P\u0026gt;|t| [95% Conf. Interval] ## -------------+---------------------------------------------------------------- ## foreign | ## Foreign | 1666.519 717.217 2.32 0.023 236.0751 3096.963 ## mpg_centered | -329.2551 74.98545 -4.39 0.000 -478.8088 -179.7013 ## | ## foreign#| ## c. | ## mpg_centered | ## Foreign | 78.88826 112.4812 0.70 0.485 -145.4485 303.225 ## | ## _cons | 5588.295 369.0945 15.14 0.000 4852.159 6324.431 ## ------------------------------------------------------------------------------ ## ## . margins foreign, at(mpg_centered=(-3 (1) 3)) ## ## Adjusted predictions Number of obs = 74 ## Model VCE : OLS ## ## Expression : Linear prediction, predict() ## ## 1._at : mpg_centered = -3 ## ## 2._at : mpg_centered = -2 ## ## 3._at : mpg_centered = -1 ## ## 4._at : mpg_centered = 0 ## ## 5._at : mpg_centered = 1 ## ## 6._at : mpg_centered = 2 ## ## 7._at : mpg_centered = 3 ## ## ------------------------------------------------------------------------------ ## | Delta-method ## | Margin Std. Err. t P\u0026gt;|t| [95% Conf. Interval] ## -------------+---------------------------------------------------------------- ## _at#foreign | ## 1#Domestic | 6576.06 370.446 17.75 0.000 5837.229 7314.891 ## 1#Foreign | 8005.915 766.8178 10.44 0.000 6476.545 9535.284 ## 2#Domestic | 6246.805 354.4734 17.62 0.000 5539.83 6953.78 ## 2#Foreign | 7755.548 709.9327 10.92 0.000 6339.632 9171.464 ## 3#Domestic | 5917.55 354.0032 16.72 0.000 5211.513 6623.587 ## 3#Foreign | 7505.181 658.8306 11.39 0.000 6191.185 8819.177 ## 4#Domestic | 5588.295 369.0945 15.14 0.000 4852.159 6324.431 ## 4#Foreign | 7254.814 614.9548 11.80 0.000 6028.325 8481.303 ## 5#Domestic | 5259.04 397.981 13.21 0.000 4465.292 6052.788 ## 5#Foreign | 7004.447 579.9479 12.08 0.000 5847.778 8161.117 ## 6#Domestic | 4929.785 437.9413 11.26 0.000 4056.338 5803.231 ## 6#Foreign | 6754.081 555.4891 12.16 0.000 5646.192 7861.969 ## 7#Domestic | 4600.53 486.253 9.46 0.000 3630.729 5570.331 ## 7#Foreign | 6503.714 543.0057 11.98 0.000 5420.723 7586.704 ## ------------------------------------------------------------------------------ ## ## . marginsplot ## ## Variables that uniquely identify margins: mpg_centered foreign ## ## . graph export marginsplot.eps, replace ## (note: file marginsplot.eps not found) ## (file marginsplot.eps written in EPS format)  In this example, the graph shows the predicted price for foreign and domestic cars at different level of mpg.\n ","date":1487030400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1487030400,"objectID":"d24ffe71b2fec810bac496234a61babd","permalink":"https://hbs-rcs.github.io/post/2017-02-16-interpret_interaction/","publishdate":"2017-02-14T00:00:00Z","relpermalink":"/post/2017-02-16-interpret_interaction/","section":"post","summary":"Interaction with two binary variables In a regression model with interaction term, people tend to pay attention to only the coefficient of the interaction term.\nLet’s start with the simpliest situation: \\(x_1\\) and \\(x_2\\) are binary and coded 0/1.","tags":["statistics","Stata"],"title":"Interpreting interaction term in a regression model","type":"post"},{"authors":null,"categories":null,"content":" Marginal effects in a linear model Stata’s margins command has been a powerful tool for many economists. It can calculate predicted means as well as predicted marginal effects. However, we do need to be careful when we use it when fixed effects are included. In a linear model, everything works out fine. However, in a non-linear model, you may not want to use margins, since it’s not calculating what you have in mind.\nIn a linear model with fixed effects, we can do it either by “demeaning” every variable, or include dummy variables. They return the same results. Fortunately, marginal effects can be calculated the same way in both models.\nFor example:\nclear sysuse auto xtset rep78 xtreg price c.mpg##c.trunk, fe margins , dydx(mpg) reg price c.mpg##c.trunk i.rep78 margins , dydx(mpg) ## ## . clear ## ## . sysuse auto ## (1978 Automobile Data) ## ## . xtset rep78 ## panel variable: rep78 (unbalanced) ## ## . xtreg price c.mpg##c.trunk, fe ## ## Fixed-effects (within) regression Number of obs = 69 ## Group variable: rep78 Number of groups = 5 ## ## R-sq: Obs per group: ## within = 0.2570 min = 2 ## between = 0.0653 avg = 13.8 ## overall = 0.2237 max = 30 ## ## F(3,61) = 7.03 ## corr(u_i, Xb) = -0.4133 Prob \u0026gt; F = 0.0004 ## ## ------------------------------------------------------------------------------ ## price | Coef. Std. Err. t P\u0026gt;|t| [95% Conf. Interval] ## -------------+---------------------------------------------------------------- ## mpg | -98.12003 226.8708 -0.43 0.667 -551.7763 355.5362 ## trunk | 295.0544 343.3934 0.86 0.394 -391.6032 981.712 ## | ## c.mpg#| ## c.trunk | -12.23318 15.94713 -0.77 0.446 -44.12143 19.65506 ## | ## _cons | 7574.85 5321.325 1.42 0.160 -3065.797 18215.5 ## -------------+---------------------------------------------------------------- ## sigma_u | 992.2156 ## sigma_e | 2631.2869 ## rho | .12449059 (fraction of variance due to u_i) ## ------------------------------------------------------------------------------ ## F test that all u_i=0: F(4, 61) = 0.86 Prob \u0026gt; F = 0.4948 ## ## . margins , dydx(mpg) ## ## Average marginal effects Number of obs = 69 ## Model VCE : Conventional ## ## Expression : Linear prediction, predict() ## dy/dx w.r.t. : mpg ## ## ------------------------------------------------------------------------------ ## | Delta-method ## | dy/dx Std. Err. z P\u0026gt;|z| [95% Conf. Interval] ## -------------+---------------------------------------------------------------- ## mpg | -268.4981 74.12513 -3.62 0.000 -413.7807 -123.2156 ## ------------------------------------------------------------------------------ ## ## . reg price c.mpg##c.trunk i.rep78 ## ## Source | SS df MS Number of obs = 69 ## -------------+---------------------------------- F(7, 61) = 3.19 ## Model | 154453046 7 22064720.8 Prob \u0026gt; F = 0.0061 ## Residual | 422343913 61 6923670.71 R-squared = 0.2678 ## -------------+---------------------------------- Adj R-squared = 0.1838 ## Total | 576796959 68 8482308.22 Root MSE = 2631.3 ## ## ------------------------------------------------------------------------------ ## price | Coef. Std. Err. t P\u0026gt;|t| [95% Conf. Interval] ## -------------+---------------------------------------------------------------- ## mpg | -98.12003 226.8708 -0.43 0.667 -551.7763 355.5362 ## trunk | 295.0544 343.3934 0.86 0.394 -391.6032 981.712 ## | ## c.mpg#| ## c.trunk | -12.23318 15.94713 -0.77 0.446 -44.12143 19.65506 ## | ## rep78 | ## 2 | 438.0002 2161.922 0.20 0.840 -3885.031 4761.031 ## 3 | 987.1363 2022.606 0.49 0.627 -3057.315 5031.587 ## 4 | 1240.944 2046.417 0.61 0.547 -2851.12 5333.008 ## 5 | 2605.83 2161.837 1.21 0.233 -1717.031 6928.691 ## | ## _cons | 6355.731 5209.899 1.22 0.227 -4062.105 16773.57 ## ------------------------------------------------------------------------------ ## ## . margins , dydx(mpg) ## ## Average marginal effects Number of obs = 69 ## Model VCE : OLS ## ## Expression : Linear prediction, predict() ## dy/dx w.r.t. : mpg ## ## ------------------------------------------------------------------------------ ## | Delta-method ## | dy/dx Std. Err. t P\u0026gt;|t| [95% Conf. Interval] ## -------------+---------------------------------------------------------------- ## mpg | -268.4981 74.12513 -3.62 0.001 -416.7205 -120.2758 ## ------------------------------------------------------------------------------ All is fine.\n Marginal effects in a non-linear model In a nonlinear model, we need to be more careful:\nclear sysuse auto xtset rep78 xtpoisson price mpg trunk, fe margins , dydx(mpg) margins , dydx(mpg) predict(nu0) poisson price mpg trunk i.rep78 margins , dydx(mpg)  ## ## . clear ## ## . sysuse auto ## (1978 Automobile Data) ## ## . xtset rep78 ## panel variable: rep78 (unbalanced) ## ## . xtpoisson price mpg trunk, fe ## ## Iteration 0: log likelihood = -39282.052 ## Iteration 1: log likelihood = -27527.055 ## Iteration 2: log likelihood = -27518.944 ## Iteration 3: log likelihood = -27518.944 ## ## Conditional fixed-effects Poisson regression Number of obs = 69 ## Group variable: rep78 Number of groups = 5 ## ## Obs per group: ## min = 2 ## avg = 13.8 ## max = 30 ## ## Wald chi2(2) = 22890.68 ## Log likelihood = -27518.944 Prob \u0026gt; chi2 = 0.0000 ## ## ------------------------------------------------------------------------------ ## price | Coef. Std. Err. z P\u0026gt;|z| [95% Conf. Interval] ## -------------+---------------------------------------------------------------- ## mpg | -.0450221 .0003814 -118.05 0.000 -.0457696 -.0442746 ## trunk | .0047349 .0004772 9.92 0.000 .0037996 .0056702 ## ------------------------------------------------------------------------------ ## ## . margins , dydx(mpg) ## ## Average marginal effects Number of obs = 69 ## Model VCE : OIM ## ## Expression : Linear prediction, predict() ## dy/dx w.r.t. : mpg ## ## ------------------------------------------------------------------------------ ## | Delta-method ## | dy/dx Std. Err. z P\u0026gt;|z| [95% Conf. Interval] ## -------------+---------------------------------------------------------------- ## mpg | -.0450221 .0003814 -118.05 0.000 -.0457696 -.0442746 ## ------------------------------------------------------------------------------ ## ## . margins , dydx(mpg) predict(nu0) ## ## Average marginal effects Number of obs = 69 ## Model VCE : OIM ## ## Expression : Predicted number of events (assuming u_i=0), predict(nu0) ## dy/dx w.r.t. : mpg ## ## ------------------------------------------------------------------------------ ## | Delta-method ## | dy/dx Std. Err. z P\u0026gt;|z| [95% Conf. Interval] ## -------------+---------------------------------------------------------------- ## mpg | -.0190939 .0001245 -153.35 0.000 -.0193379 -.0188498 ## ------------------------------------------------------------------------------ ## ## . poisson price mpg trunk i.rep78 ## ## Iteration 0: log likelihood = -27550.942 ## Iteration 1: log likelihood = -27550.912 ## Iteration 2: log likelihood = -27550.912 ## ## Poisson regression Number of obs = 69 ## LR chi2(6) = 24962.86 ## Prob \u0026gt; chi2 = 0.0000 ## Log likelihood = -27550.912 Pseudo R2 = 0.3118 ## ## ------------------------------------------------------------------------------ ## price | Coef. Std. Err. z P\u0026gt;|z| [95% Conf. Interval] ## -------------+---------------------------------------------------------------- ## mpg | -.0450221 .0003814 -118.05 0.000 -.0457696 -.0442746 ## trunk | .0047349 .0004772 9.92 0.000 .0037996 .0056702 ## | ## rep78 | ## 2 | .1476657 .0117935 12.52 0.000 .1245509 .1707805 ## 3 | .2295466 .0111741 20.54 0.000 .2076458 .2514474 ## 4 | .2726354 .0112656 24.20 0.000 .2505552 .2947155 ## 5 | .4682657 .0115137 40.67 0.000 .4456992 .4908321 ## | ## _cons | 9.323117 .0149274 624.57 0.000 9.29386 9.352374 ## ------------------------------------------------------------------------------ ## ## . margins , dydx(mpg) ## ## Average marginal effects Number of obs = 69 ## Model VCE : OIM ## ## Expression : Predicted number of events, predict() ## dy/dx w.r.t. : mpg ## ## ------------------------------------------------------------------------------ ## | Delta-method ## | dy/dx Std. Err. z P\u0026gt;|z| [95% Conf. Interval] ## -------------+---------------------------------------------------------------- ## mpg | -276.7079 2.382193 -116.16 0.000 -281.3769 -272.0389 ## ------------------------------------------------------------------------------ ## ## . In this example, “xtpoisson, fe” and “poisson i.rep78” returns the same results. Fixed effect Poisson model (sometimes called conditional fixed effect Poisson) is the same models as a Poisson model with dummies, just like a linear model (OLS with dummies is the same as fixed effect OLS). Poisson model and OLS are unique in this sense that there is no “incidental paramater” problem.\nWe see in this example, margins commands do not return the same marginal effects, even though the models are the same. The reason behind this is that in a conditional fixed effect Poisson, the fixed effects are not estimated (they are not in the final likelihood function that gets estimated). Therefore, we’ll have to make a decision what values to use as the values of the fixed effects. “margins, predict(nu0)” simply set all fixed effects to zero. On the other hand, margins after Poisson model with dummies does not do that. The fixed effect in that case gets estimated. Therefore the marginal effects in that case make more sense.\nSo our advise for a conditioanl Poisson model is that we should not use margins to calculate marginal effects afterwards; instead, we should simply stick with the original coefficient estimates.\nThe same logic applies to the conditional logit model. Fixed effects are not estimated in that model; simply setting them to zero does not make too much sense. In addition, conditional logit model is not the same model as a logit model with dummies, since there is the “incidental paramater” problem. Again, we should just focus on the coefficient estimates as the effect on the logged odds.\n ","date":1487030400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1487030400,"objectID":"eb166c8edd71107bb81f627700e9aa45","permalink":"https://hbs-rcs.github.io/post/2017-02-16-margins_nonlinear/","publishdate":"2017-02-14T00:00:00Z","relpermalink":"/post/2017-02-16-margins_nonlinear/","section":"post","summary":"Marginal effects in a linear model Stata’s margins command has been a powerful tool for many economists. It can calculate predicted means as well as predicted marginal effects. However, we do need to be careful when we use it when fixed effects are included.","tags":["statistics","Stata"],"title":"Marginal effects in models with fixed effects","type":"post"},{"authors":null,"categories":null,"content":"  from datetime import datetime, timedelta import subprocess def main(): timestamp = datetime.now().isoformat() print \u0026#39;Hello, World! It is currently %s.\u0026#39; % timestamp def reschedule(**kwargs): when = datetime.now() + timedelta(**kwargs) timestamp = when.strftime(\u0026#39;%Y:%m:%d:%H:%M\u0026#39;) path = __file__ command = \u0026#39;bsub -b %(timestamp)s python %(path)s\u0026#39; % locals() subprocess.call(command, shell=True) if __name__ == \u0026#39;__main__\u0026#39;: reschedule(minutes=1) main() ","date":1479340800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1479340800,"objectID":"fe8cbc7ab7225c9b6e6aeb05ff1ab3a3","permalink":"https://hbs-rcs.github.io/post/2016-11-17-bsub-cron/","publishdate":"2016-11-17T00:00:00Z","relpermalink":"/post/2016-11-17-bsub-cron/","section":"post","summary":"from datetime import datetime, timedelta import subprocess def main(): timestamp = datetime.now().isoformat() print \u0026#39;Hello, World! It is currently %s.\u0026#39; % timestamp def reschedule(**kwargs): when = datetime.now() + timedelta(**kwargs) timestamp = when.","tags":["grid"],"title":"Running Cron Jobs on the Grid","type":"post"},{"authors":null,"categories":null,"content":"  Running Matlab (interactively no GUI) I’m looking into this issue. One thing I’ve noticed is that starting Matlab takes a long time on the grid. When I start Matlab with the following command:\nbsub -q interactive -Is matlab -nodesktop -nojvm -nosplash it takes about 45 seconds to start. If I tell Matlab where its license file is, it starts in about 5 seconds!\nbsub -q interactive -Is matlab -nodesktop -nojvm -nosplash -c /usr/local/apps/matlab/matlab_2015a/licenses/network.lic I’m hoping this license file trick will speed up the parpool initialization. I’ll let you know what I find.\n Running a parallel loop I’ve attached an example script to confirm that parfor works on the grid. Here are some timing results from this script:\nRunning sequential loop ... Elapsed time is 23.157138 seconds. Starting parallel pool (parpool) using the \u0026#39;local\u0026#39; profile ... connected to 3 workers. Elapsed time is 11.678452 seconds. Running parallel loop ... Elapsed time is 7.676729 seconds. I ran this with three workers. The parallel loop is right around three times as fast as the sequential loop. Setting up the parallel pool takes a little while, but it’s sooooo much better than if I don’t tell Matlab where its license file is.\nHere’s the bsub command I used to start an interactive Matlab session with 4 cores:\nbsub -n 4 -q interactive -Is matlab -nodesktop -nosplash -c /usr/local/apps/matlab/matlab_2015a/licenses/network.lic If you want to run with more processors replace “-n 4” with something like “-n 12”. Twelve is the max number of processors available. Let me know if you have any questions.\n Requesting more memory To specify the amount of memory use the -M flag:\nbsub -n 4 -M 10240 -q interactive -Is matlab -nodesktop -nosplash -c /usr/local/apps/matlab/matlab_2015a/licenses/network.lic Memory here is measured in megabytes, above I’m requesting 10 gigabytes. When submitting through bsub I’m not sure how much memory is requested by default, so it’s probably smart to use the -M flag whenever using bsub.\n ","date":1479340800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1479340800,"objectID":"3a386b3515815ee214b95e409ea4cd06","permalink":"https://hbs-rcs.github.io/post/2016-11-17-matlab/","publishdate":"2016-11-17T00:00:00Z","relpermalink":"/post/2016-11-17-matlab/","section":"post","summary":"Running Matlab (interactively no GUI) I’m looking into this issue. One thing I’ve noticed is that starting Matlab takes a long time on the grid. When I start Matlab with the following command:","tags":["grid"],"title":"Running Matlab on the Grid","type":"post"},{"authors":null,"categories":null,"content":"  This post was last updated on 2021-10-26.\nIf you think Python 2.6.6 or R 3.0.2 sound old, I have good news for you. The Conda package manager makes it easy to install the latest and greatest Python and R packages in your home directory. Conda facilitates the installation of Python 2.7.11, Python 3.5.2, and R 3.3.1.\nInstallation The first step to installing Python or R on the Grid is to install Miniconda. The steps below outline how to install Miniconda.\nLog in to the grid:\nssh researchgrid.hbs.edu Set up an alias so it’s easy to submit interactive jobs to back-end nodes:\nalias my_run=\u0026quot;bsub -app generic-5g -q interactive -Is\u0026quot; Download the Miniconda installer:\nmy_run wget http://grid.rcs.hbs.org/files/miniconda2-linux-x86_64-4.1.12.sh.gz Unzip and run the installer\ngunzip miniconda2-linux-x86_64-4.1.12.sh.gz chmod +x miniconda2-linux-x86_64-4.1.12.sh my_run ./miniconda2-linux-x86_64-4.1.12.sh Here’s how I answered the questions when running the installer:\nDo you approve the license terms? yes I pressed enter to install Miniconda2 in ~/miniconda2 Do you wish the installer to prepend the Miniconda2 install location to PATH in your ~/.bashrc ? no  Make sure the Miniconda bin is on your search path:\nexport PATH=\u0026quot;~/miniconda2/bin:$PATH\u0026quot; If you skip this step, trying to use Conda will throw error messages like -bash: conda: command not found. It is also useful to put the same export command in your ~/.bash_profile file. This way when you log into the grid and call python in the future it will find the python in ~/miniconda2/bin first rather than using the old version in /usr/local/bin.\n Remove the Miniconda installer:\nrm -f miniconda2-linux-x86_64-4.1.12.sh  Python Note this step requires that you have already installed Miniconda. If you have not installed Miniconda yet, return to Section .\nThe following command installs the typical Python packages used in social science research:\nmy_run conda install anaconda If the Python packages included in Anaconda are insufficient for your needs, Conda’s documentation on managing packages has excellent information on how to install additional packages. The general approach to installing additional packages proceeds as follows:\nSee if the package is available through Conda with conda search. If it is, install the package using conda install.\n See if the package is available on http://anaconda.org. If it is, install the package using conda install being sure to specify the correct channel.\n To install a non-conda package, use pip to install the package.\n   R Note this step requires that you have already installed Miniconda. If you have not installed Miniconda yet, return to Section .\nThe following command installs the typical R packages used in social science research:\nmy_run conda install -c r r-essentials Notice that the above command installs r-essentials from the r channel. This package contains the latest version of R.\nIf you need additional R packages the general approach proceeds as follows:\nSearch http://anaconda.org. If the package is available use conda install specifying the appropriate channel.\n If the package is available through CRAN but not Conda, you can create a new Conda package from the CRAN repository. For documentation on this process see building conda packages and conda skeleton cran. This looks like a bit of work to do properly.\n This Stack Overflow answer provides a quick and dirty workaround if you don’t want to build new Conda packages. The key insight is to open R and use install.packages being sure the specify the correct path for where to install the package, something like:\ninstall.packages(\u0026quot;rstan\u0026quot;, lib = \u0026quot;~/miniconda2/lib/R/library\u0026quot;)   Environments One of Conda’s most useful features is the ability to create virtual environments. This is particularly helpful if you have multiple projects that depend on different versions of packages. With a virtual environment you can update the packages for one project without disturbing the packages of your other projects. Conda’s documentation on managing environments is a good place to learn about this feature.\n  Execution Now that you have installed python and R in ~/miniconda2/bin/ you need to run these programs using bsub commands so your computationally intense jobs are run on back-end nodes rather than on front-end nodes. Below I give a quick introduction to submitting batch and interactive jobs through LSF.\nBatch To start let’s create an alias describing a bsub command for submitting batch jobs. If you want to learn more about bsub go to this page in the documentation.\nalias my_batch=\u0026quot;bsub -app generic-5g -q normal\u0026quot; If you want to run a Python script named your_file.py you would run:\nmy_batch ~/miniconda2/bin/python your_file.py Notice that it’s important to give the full path to your installation of Python. Similarly, here is how to run an R script named your_file.R:\nmy_batch ~/miniconda2/bin/Rscript your_file.R  Interactive Note, I define the my_run alias used below in Section .\nThere are a lot of ways to run interactive Python and R jobs on the Grid. I’m going to highlight the most enjoyable ways:\nJupyter Console If you want to work at the command line, the Jupyter Console makes interactive work quite pleasant and it works with both Python and R. To run Python use:\nmy_run jupyter console To run R use:\nmy_run jupyter console --kernel=ir  Jupyter Notebook The Jupyter Notebook is not currently supported on the Grid for security reasons.\n RStudio Desktop It is possible to run RStudio Desktop on the grid. Here is how I run RStudio (note the spelling of the Rstudio command has a capital R and a lower-case s):\nexport RSTUDIO_WHICH_R=~/miniconda2/bin/R Rstudio Unfortunately, install RStudio on the Grid is quite challenging and the currently installed version is quite old. You’re likely to have a more pleasant interactive experience using the Jupyter Notebook, which is easy to install.\n   Troubleshooting lattice was built before R 3.0.0 R is working great, but I’m getting the following error:\n\u0026gt; library(lattice) Error: package ‘lattice’ was built before R 3.0.0: please re-install it This is happening because R is looking for packages in two places:\n\u0026gt; .libPaths() [1] \u0026quot;/usr/local/apps/R/packages\u0026quot; [2] \u0026quot;/export/home/dor/amarder/miniconda2/lib/R/library\u0026quot; The first directory has old packages in it. When R is loading lattice it tries to import the version in /usr/local/apps/R/packages first, unfortunately this version is too old and the import fails. To fix this issue remove this directory from .libPaths.\n\u0026gt; .libPaths(.libPaths()[.libPaths() != \u0026quot;/usr/local/apps/R/packages\u0026quot;]) \u0026gt; library(lattice) You have successfully imported lattice in the current R session. To make this change affect all future R sessions add the following line to your ~/.Rprofile file:\n.libPaths(.libPaths()[.libPaths() != \u0026quot;/usr/local/apps/R/packages\u0026quot;])   ","date":1479168000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1479168000,"objectID":"84b0421e70092d320d005a5ad9681d11","permalink":"https://hbs-rcs.github.io/post/2016-11-15-conda/","publishdate":"2016-11-15T00:00:00Z","relpermalink":"/post/2016-11-15-conda/","section":"post","summary":"This post was last updated on 2021-10-26.\nIf you think Python 2.6.6 or R 3.0.2 sound old, I have good news for you. The Conda package manager makes it easy to install the latest and greatest Python and R packages in your home directory.","tags":["grid"],"title":"Installing Python and R packages on the Grid","type":"post"},{"authors":null,"categories":null,"content":"  In empirical studies, data sets with a lot of zeros are often hard to model. There are various models to deal with it: zero-inflated Poisson model, Negative Binomial (NB)model, hurdle model, etc.\nHere we are following a zero-inflated model’s thinking: model the data with two processes. One is a Bernoulli process, the other one is a count data process (Poisson or NB).\nWe’d like to see, in this simulation exercise, how different models perform with changes of sample size and percentage of zeros (we expect the less zero, the better a plain Poisson model would perform). Therefore we vary sample size \\(n\\) and an indicator of how much percentage of zeros in the data \\(\\theta\\).\nFor the count data process (\\(y_c\\)):\n\\[ log(y_c) = 2 x + u \\]\nFor the Bernoulli process (\\(y_b\\)):\n\\[ z_1 = 4 z + \\theta \\]\n\\[ logit(y_b) = z_1 \\]\n\\[ p_y = \\frac{e^{z_1}}{1+e^{z_1}} \\]\nCombining these two processes:\n\\[ y = y_c \\ \\text{if} \\ p_y=1 \\]\n\\[ y = y_b \\ \\text{if} \\ p_y=0 \\]\nZero-inflated Poisson models A zero-inflated Poisson needs specifying both the binary process and the count process correctly. Often than not, we don’t have a model for the binary process. Many people simply use the same explanatory variables for both processes. We simulate both situations. Case 1: suppose we observe \\(z\\), and case 2: suppose we don’t observe \\(z\\). In the graph below, they are labeled zip1 and zip2.\n Poisson model A plain Poisson model returns a consistent estimator for the coefficients, with or without Poisson-distributed data. We expect Poisson model’s performance improve with sample size. Note that the standard errors from a Poisson model needs adjustment, which we do not discuss in this post.\n NB model NB model is used widely to handle “overdispersion” problem. That is, the variance far exceeds the mean, therefore the Poisson model is considered inappropriate. NB model addresses that by allowing an extra parameter. However, many people also use it to model “extra zero” situation, we’ll see in our simulation it may not be better than a plain Poisson model.\n Log-linear model What about an OLS model with \\(log(y+1)\\)?\n hurdle model A hurdle model models the zero’s and other values separately; that is, the zero’s are from a binomial process only, the other positive values are from a truncated count data process. We assume here, in the simulation, we don’t observe \\(z\\). Therefore, \\(x\\) is determining both binary and count processes. In the graph below, it’s labeled hurdle.\nlibrary(MASS) library(pscl) library(msm) require(snowfall) set.seed(666) # initialize parallel cores. sfInit( parallel=TRUE, cpus=12) gen.sim \u0026lt;- function(df){ z \u0026lt;- rnorm(df[\u0026#39;nobs\u0026#39;],0,1) x \u0026lt;- rnorm(df[\u0026#39;nobs\u0026#39;],0,1) u \u0026lt;- rnorm(df[\u0026#39;nobs\u0026#39;],0,1) #generate count data log.mu \u0026lt;- 2*x + u y.count \u0026lt;- floor(exp(log.mu)) # generate bernoulli data z1 \u0026lt;- 4*z + df[\u0026#39;th\u0026#39;] prob \u0026lt;- exp(z1)/(1+exp(z1)) y.logit \u0026lt;- rbinom(df[\u0026#39;nobs\u0026#39;],size=1,prob=prob) # zero-inflated poisson y \u0026lt;- ifelse(y.logit==1, y.count,y.logit) m1 \u0026lt;- zeroinfl(y ~ x | z) m1.x \u0026lt;- summary(m1)$coefficients$count[\u0026#39;x\u0026#39;,\u0026#39;Estimate\u0026#39;]-2 # zero-inflated without a z m4 \u0026lt;- zeroinfl(y ~ x | x) m4.x \u0026lt;- summary(m4)$coefficients$count[\u0026#39;x\u0026#39;,\u0026#39;Estimate\u0026#39;]-2 # poisson m2 \u0026lt;- glm(y ~ x, family = \u0026quot;poisson\u0026quot;) m2.x \u0026lt;- summary(m2)$coefficients[\u0026#39;x\u0026#39;,\u0026#39;Estimate\u0026#39;]-2 # log linear with plus 1 y.plus1 \u0026lt;- y +1 m3 \u0026lt;- lm(log(y.plus1) ~ x) m3.x \u0026lt;- exp(summary(m3)$coefficients[\u0026#39;x\u0026#39;,\u0026#39;Estimate\u0026#39;])-2 # # # negative binomial # m5.x \u0026lt;- tryCatch(nb1(y ~ x), error=function(e) NA) m5 \u0026lt;- glm(y ~ x, family=negative.binomial(2)) m5.x \u0026lt;- summary(m5)$coefficients[\u0026#39;x\u0026#39;,\u0026#39;Estimate\u0026#39;]-2 # hurdle model m6 \u0026lt;- hurdle(y ~ x) # m5 \u0026lt;- glm(y ~ x, family=negative.binomial(2)) m6.x \u0026lt;- summary(m6)$coefficients$count[\u0026#39;x\u0026#39;,\u0026#39;Estimate\u0026#39;]-2 return(c(zip1=m1.x, poisson=m2.x, log.linear=m3.x, zip2=m4.x, nb=m5.x, hurdle=m6.x)) } # set parameter space sim.grid = seq(1,100,1) th.grid = seq(-4, 4, 2) nobs.grid = ceiling(exp(seq(4,9,1))/100)*100 data.grid \u0026lt;- expand.grid(nobs.grid, sim.grid, th.grid) names(data.grid) \u0026lt;- c(\u0026#39;nobs\u0026#39;, \u0026#39;nsim\u0026#39;,\u0026#39;th\u0026#39;) # export functions to the slaves # export data to the slaves if necessary sfExport(list=list(\u0026quot;gen.sim\u0026quot;)) # export function to the slaves sfLibrary(msm) sfLibrary(pscl) results \u0026lt;- data.frame(t(sfApply(data.grid, 1, gen.sim))) # stop the cluster sfStop() forshiny \u0026lt;- cbind(data.grid, results) # write out for use in shiny. # write.csv(forshiny, \u0026#39;results.csv\u0026#39;) Count data models can be used even if data is not “counts”; for example, some positive non-integer numbers. In fact, Poisson model is consistent even if data is not Poisson-distributed, if the model specification is correct on modeling the log of expected counts. We simulate both scenarios: Case 1, data is generated from a Poisson process. Case 2, data is generated from a Normal distribution, but we use count data models to model it. The above code is for case 2.\nWe simulate 100 times with \\(\\theta\\) ranging from -4 to 4, lower number means higher percentage of zeros; number of observations from \\(e^4\\) to \\(e^9\\).\nSince there are many simulations, we used “snowfall” library to speed things up.\nFor raw code, please visit case1: poisson and case2: normal.\n      In the graph, there are two vertical lines. The lighter one is the bias, the other one is MSE.\nIf we can compare the situations that data generated from Poisson process and normal process, we can see using count data models to model normal distributed data is still valid, just with bigger standard deviations. With large sample, actually Poisson model out-performs NB, and Log-linear model, without having to model the extra zeros. NB model does not do well, in general. Log-linear model is the worst. Zero-inflated Poisson with correct specification of the binary process performs the best, naturally. But that relies on correct specification of the binary process, which is not always realistic. Zero-inflated Poisson or hurdle model without correct specification of the binary process are not too bad, especially when sample size is large. These two are very close since only the difference between the two is that hurdle is modeling all zeros from binary process and all positive numbers from count data process; while zip2 is modeling some zeros (probably most) from binary process and all other values (including some zeros) from a Poisson process.\n ","date":1410912000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1410912000,"objectID":"3bedbb6880b8eca22008d2398395933c","permalink":"https://hbs-rcs.github.io/post/2014-09-17-poisson-models/","publishdate":"2014-09-17T00:00:00Z","relpermalink":"/post/2014-09-17-poisson-models/","section":"post","summary":"In empirical studies, data sets with a lot of zeros are often hard to model. There are various models to deal with it: zero-inflated Poisson model, Negative Binomial (NB)model, hurdle model, etc.","tags":["statistics"],"title":"A comparison of various count data models with extra zeros","type":"post"},{"authors":null,"categories":null,"content":"  This post is inspired by diffuse prior\nLewbel’s 2012 paper proposed an estimator based on heteroscedasticity to address the problem of endogeneity without an instrument. This problem has been an issue for many (maybe most) empirical researchers with observational data. People are challenged with endogeneity and they have difficulty locating a valid instrument (who doesn’t?).\nUsing the “ivlewbel” package in R, I compare the performance of Lewbel’s estimator with OLS and TSLS (two stage least square) estimators, with different values of sample size, and heteroscedasticity.\nlibrary(ivlewbel) require(snowfall) set.seed(666) ## initialize parallel cores. sfInit( parallel=TRUE, cpus=12) gen.sim \u0026lt;- function(df){ k \u0026lt;- df[\u0026#39;k\u0026#39;] nobs \u0026lt;- df[\u0026#39;nobs\u0026#39;] x\u0026lt;-runif(nobs, min=-1, max=1) u \u0026lt;- rnorm(nobs,0,1) u1 \u0026lt;- rnorm(nobs,0,1) u2 \u0026lt;- rnorm(nobs,0,1) x1 \u0026lt;-runif(nobs, min=-1, max=1) x2 \u0026lt;- rnorm(nobs,0,1) z \u0026lt;- rnorm(nobs,0,1) e1 = exp(.3*k*(x+x1))*u1 e2 = u2 ## y1 is the endogenous variable; z is the instrument; x1 is ## omitted but determines heteroskedasticity of y1; e1 e2 are ## correlated because of common factor of u; x is the only ## observed exogenous variable. The true coefficient on y1 should ## be 1. lewbel model use x as both the exogenous variable and ## the heteroscedasticity factor. tsls assumes we have an ## instrument z. k is to adjust for degree of heteroscedasticity. y1 = 1 + z + x + x1 + e1 y2 = 1 + y1 + x + x1 + e2 data = data.frame(y2, y1, x1, x2, z, x) lewbel.model \u0026lt;- lewbel(formula = y2 ~ y1 | x | x , data = data) lm.model \u0026lt;- lm(y2 ~ y1 + x, data=data) tsls.model \u0026lt;- tsls(y2 ~ y1 + x , ~ z + x , data=data) lm.y1 \u0026lt;- summary(lm.model)$coefficients[\u0026#39;y1\u0026#39;,\u0026#39;Estimate\u0026#39;]-1 tsls.y1 \u0026lt;- tsls.model$coefficients[\u0026#39;y1\u0026#39;]-1 lewbel.y1 \u0026lt;- lewbel.model$coef.est[\u0026#39;y1\u0026#39;, \u0026#39;Estimate\u0026#39;]-1 return(c(lm=lm.y1, lewbel=lewbel.y1,tsls=tsls.y1)) } ## set parameter space sim.grid = seq(1,100,1) k.grid=seq(1,10,1) nobs.grid = ceiling(exp(seq(4, 8, 1))/100)*100 data.grid \u0026lt;- expand.grid(nobs.grid, sim.grid, k.grid) names(data.grid) \u0026lt;- c(\u0026#39;nobs\u0026#39;, \u0026#39;nsim\u0026#39;, \u0026#39;k\u0026#39;) ## export functions to the slaves ## export data to the slaves if necessary sfExport(list=list(\u0026quot;gen.sim\u0026quot;)) ## export function to the slaves sfLibrary(ivlewbel) ## parallel computing results \u0026lt;- data.frame(t(sfApply(data.grid, 1, gen.sim))) ## stop the cluster sfStop() names(results) \u0026lt;- c(\u0026#39;lm\u0026#39;,\u0026#39;lewbel\u0026#39;,\u0026#39;tsls\u0026#39;) forshiny \u0026lt;- cbind(data.grid, results) ## write out for use in shiny. ## write.csv(forshiny, \u0026#39;results.csv\u0026#39;) The data generating processes in this simulation study are: \\[y_2\\] is the dependent variable.\n\\[ y_2 = y_1 + x + x_1 + e_2 \\]\n\\[ y_1 = z + x + x_1 + e_1 \\]\nHere \\[e_1\\] and \\[e_2\\] are the error terms. Among the independent variables of \\[y_2\\], \\[x\\] is observed; \\[x_1\\] is unobserved, \\[z\\] is the intended instruments. \\[y_1\\] is the endogenous variable, since it’s determined by \\[x_1\\], and \\[x_1\\] is part of \\[y_2\\]’s error term since \\[x_1\\] is unobserved. If we have \\[z\\], then we can use TSLS to estimate the model. If not, then we’ll try Lewbel’s model to see if it works.\nThe ‘gen_sim’ function returns the three estimates (OLS, TSLS and Lewbel). \\[e_1\\] is assumed to have some degree of heteroscedasticity:\n\\[ e_1 = e^{0.3*k*(x+x_1)}*u_1 \\]\nwhere \\[u_1\\] is a standard normal variable. \\[k\\] is a variable used to adjust for degree of heteroscedasticity. Here we assume we know a variable that determines the heteroscedasticity: \\[x\\]. But \\[x_1\\] remains unobserved.\nWe then simulate 100 times with \\[k\\] ranging from 1 to 10; number of observations from \\[e^4\\] to \\[e^8\\].\nSince there are many simulations, we used “snowfall” library to speed things up.\nFor raw code, please visit here.\n   We can see at moderate degree of heteroscedasticity, Lewbel’s estimator performs well, at reasonably large sample size. TSLS performs well since we assume we observe \\[z\\]. At very high degree of heteroscedasticity, both OLS and Lewbel’s estimator perform well. My explanation is that when there is very high degree of heteroscedasticity, heteroscedasticity just outplays endogeneity so that OLS’ bias goes down (since we know that OLS under heteroscedasticity is consistent.), with large sample size.\n","date":1410480000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1410480000,"objectID":"09b468d65be51def4715862125484128","permalink":"https://hbs-rcs.github.io/post/2014-09-12-lewbel-vs-ols-vs-tsls/","publishdate":"2014-09-12T00:00:00Z","relpermalink":"/post/2014-09-12-lewbel-vs-ols-vs-tsls/","section":"post","summary":"This post is inspired by diffuse prior\nLewbel’s 2012 paper proposed an estimator based on heteroscedasticity to address the problem of endogeneity without an instrument. This problem has been an issue for many (maybe most) empirical researchers with observational data.","tags":["statistics"],"title":"A comparison of Lewbel model vs. OLS and TSLS","type":"post"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://hbs-rcs.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"4953bf99d7018c161b1b361cb25f1331","permalink":"https://hbs-rcs.github.io/search/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/search/","section":"","summary":"search","tags":null,"title":"Search","type":"page"}]